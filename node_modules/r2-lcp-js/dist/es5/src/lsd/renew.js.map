{"version":3,"file":"renew.js","sourceRoot":"","sources":["../../../../src/lsd/renew.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\n// import * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { LSD } from \"../parser/epub/lsd\";\nimport { TaJsonDeserialize, TaJsonSerialize } from \"../serializable\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports\nimport URI = require(\"urijs\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports\nimport URITemplate = require(\"urijs/src/URITemplate\");\n\nconst debug = debug_(\"r2:lcp#lsd/renew\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdRenew(\n    end: Date | undefined,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    lsdJSON: any,\n    deviceIDManager: IDeviceIDManager,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    httpHeaders?: { [key: string]: string; }): Promise<any> {\n\n    if (lsdJSON instanceof LSD) {\n        return lsdRenew_(end, lsdJSON as LSD, deviceIDManager);\n    }\n\n    let lsd: LSD | undefined;\n    try {\n        lsd = TaJsonDeserialize<LSD>(lsdJSON, LSD);\n    } catch (err) {\n        debug(err);\n        debug(lsdJSON);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"Bad LSD JSON?\");\n    }\n\n    const obj = lsdRenew_(end, lsd, deviceIDManager, httpHeaders);\n    return TaJsonSerialize(obj);\n}\n\nexport async function lsdRenew_(\n    end: Date | undefined,\n    lsd: LSD,\n    deviceIDManager: IDeviceIDManager,\n    httpHeaders?: { [key: string]: string; }): Promise<LSD> {\n\n    if (!lsd) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n    if (!lsd.Links) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"No LSD links!\");\n    }\n\n    const licenseRenew = lsd.Links.find((link) => {\n        return link.Rel === \"renew\";\n    });\n    if (!licenseRenew) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"No LSD renew link!\");\n    }\n\n    let deviceID: string;\n    try {\n        deviceID = await deviceIDManager.getDeviceID();\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"Problem getting Device ID !?\");\n    }\n\n    let deviceNAME: string;\n    try {\n        deviceNAME = await deviceIDManager.getDeviceNAME();\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"Problem getting Device NAME !?\");\n    }\n\n    let renewURL: string = licenseRenew.Href;\n    if (licenseRenew.Templated) {\n        const urlTemplate = new URITemplate(renewURL);\n        const uri1 = urlTemplate.expand({ end: \"xxx\", id: deviceID, name: deviceNAME }, { strict: false });\n        renewURL = uri1.toString();\n\n        const uri2 = new URI(renewURL); // URIjs necessary for .search() to work\n        // TODO: urijs types broke this! (lib remains unchanged)\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (uri2 as any).search((data: any) => {\n            // overrides existing (leaves others intact)\n            data.end = end?.toISOString(); // can be undefined\n        });\n        renewURL = uri2.toString();\n\n        // url = url.replace(\"{?end,id,name}\", \"\"); // TODO: smarter regexp?\n        // url = new URI(url).setQuery(\"id\", deviceID).setQuery(\"name\", deviceNAME).toString();\n    }\n    if (IS_DEV) {\n        debug(\"RENEW: \" + renewURL);\n    }\n\n    return new Promise<LSD>(async (resolve, reject) => {\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const failure = (err: any) => {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            reject(err);\n        };\n\n        const success = async (response: request.RequestResponse) => {\n\n            if (IS_DEV) {\n                Object.keys(response.headers).forEach((header: string) => {\n                    debug(header + \" => \" + response.headers[header]);\n                });\n            }\n\n            if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                let failBuff: Buffer;\n                try {\n                    failBuff = await streamToBufferPromise(response);\n                } catch (buffErr) {\n                    if (IS_DEV) {\n                        debug(buffErr);\n                    }\n                    failure(response.statusCode);\n                    return;\n                }\n                try {\n                    const failStr = failBuff.toString(\"utf8\");\n                    if (IS_DEV) {\n                        debug(failStr);\n                    }\n                    try {\n                        const failJson = global.JSON.parse(failStr);\n                        if (IS_DEV) {\n                            debug(failJson);\n                        }\n                        failJson.httpStatusCode = response.statusCode;\n                        failure(failJson);\n                    } catch (jsonErr) {\n                        if (IS_DEV) {\n                            debug(jsonErr);\n                        }\n                        failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                    }\n                } catch (strErr) {\n                    if (IS_DEV) {\n                        debug(strErr);\n                    }\n                    failure(response.statusCode);\n                }\n                return;\n            }\n\n            let responseData: Buffer;\n            try {\n                responseData = await streamToBufferPromise(response);\n            } catch (err) {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(err);\n                return;\n            }\n            const responseStr = responseData.toString(\"utf8\");\n            if (IS_DEV) {\n                debug(responseStr);\n            }\n            const responseJson = global.JSON.parse(responseStr);\n            if (IS_DEV) {\n                debug(responseJson);\n            }\n\n            try {\n                const newLsd = TaJsonDeserialize<LSD>(responseJson, LSD);\n                if (IS_DEV) {\n                    debug(newLsd);\n                }\n                resolve(newLsd);\n            } catch (err) {\n                debug(err);\n                resolve(responseJson);\n            }\n        };\n\n        const headers = Object.assign({\n            \"Accept\": \"application/json,application/xml\",\n            \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n            \"User-Agent\": \"Readium2-LCP\",\n        }, httpHeaders ? httpHeaders : {});\n\n        // // No response streaming! :(\n        // // https://github.com/request/request-promise/issues/90\n        // const needsStreamingResponse = true;\n        // if (needsStreamingResponse) {\n            request.put({\n                headers,\n                method: \"PUT\",\n                timeout: 5000,\n                uri: renewURL,\n            })\n                .on(\"response\", async (res) => {\n                    try {\n                        await success(res);\n                    }\n                    catch (successError) {\n                        failure(successError);\n                        return;\n                    }\n                })\n                .on(\"error\", failure);\n        // } else {\n        //     let response: requestPromise.FullResponse;\n        //     try {\n        //         // tslint:disable-next-line:await-promise no-floating-promises\n        //         response = await requestPromise({\n        //             headers,\n        //             method: \"PUT\",\n        //             resolveWithFullResponse: true,\n        //             uri: renewURL,\n        //         });\n        //     } catch (err) {\n        //         failure(err);\n        //         return;\n        //     }\n\n        //     await success(response);\n        // }\n    });\n}\n"]}