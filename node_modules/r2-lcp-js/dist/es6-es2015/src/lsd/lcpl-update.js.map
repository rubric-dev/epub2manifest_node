{"version":3,"file":"lcpl-update.js","sourceRoot":"","sources":["../../../../src/lsd/lcpl-update.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as moment from \"moment\";\nimport * as request from \"request\";\n// import * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { LCP } from \"../parser/epub/lcp\";\n\n// import { StatusEnum } from \"../parser/epub/lsd\";\n\nconst debug = debug_(\"r2:lcp#lsd/lcpl-update\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function lsdLcpUpdate(\n    lcp: LCP,\n    httpHeaders?: { [key: string]: string; }): Promise<string> {\n\n    if (!lcp.LSD) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"LCP LSD data is missing.\");\n    }\n\n    if (lcp.LSD.Updated && lcp.LSD.Updated.License &&\n        (lcp.Updated || lcp.Issued)) {\n        const updatedLicenseLSD = moment(lcp.LSD.Updated.License);\n        const updatedLicense = moment(lcp.Updated || lcp.Issued);\n        const forceUpdate = false; // just for testing!\n        if (forceUpdate ||\n            (updatedLicense.isBefore(updatedLicenseLSD)\n            // tslint:disable-next-line:max-line-length\n            // TODO: Should we check for this? Is LCP server supposed to deliver non-usable licenses? (e.g. rights.end in the past) Let's do a sanity check on response LCP JSON (see below)\n            // tslint:disable-next-line:max-line-length\n            // && (lcp.LSD.Status !== StatusEnum.Cancelled && lcp.LSD.Status !== StatusEnum.Expired && lcp.LSD.Status !== StatusEnum.Returned && lcp.LSD.Status !== StatusEnum.Revoked)\n            // && (lcp.LSD.Status === StatusEnum.Active || lcp.LSD.Status === StatusEnum.Ready)\n            )) {\n            if (IS_DEV) {\n                debug(\"LSD license updating...\");\n            }\n            if (lcp.LSD.Links) {\n                const licenseLink = lcp.LSD.Links.find((link) => {\n                    return link.Rel === \"license\";\n                });\n                if (!licenseLink) {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    return Promise.reject(\"LSD license link is missing.\");\n                }\n\n                if (IS_DEV) {\n                    debug(\"OLD LCP LICENSE, FETCHING LSD UPDATE ... \" + licenseLink.Href);\n                }\n\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                return new Promise<any>(async (resolve, reject) => {\n\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const failure = (err: any) => {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(err);\n                    };\n\n                    const success = async (response: request.RequestResponse) => {\n\n                        if (IS_DEV) {\n                            Object.keys(response.headers).forEach((header: string) => {\n                                debug(header + \" => \" + response.headers[header]);\n                            });\n                        }\n\n                        const tryErrorJson = (str: string) => {\n                            try {\n                                const failJson = global.JSON.parse(str);\n                                if (IS_DEV) {\n                                    debug(failJson);\n                                }\n                                failJson.httpStatusCode = response.statusCode;\n                                failure(failJson);\n                            } catch (jsonErr) {\n                                if (IS_DEV) {\n                                    debug(jsonErr);\n                                }\n                                failure({ httpStatusCode: response.statusCode, httpResponseBody: str });\n                            }\n                        };\n\n                        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n                            // SEE: https://github.com/readium/readium-lcp-server/issues/150#issuecomment-356993350\n                            // if (licenseLink.href.indexOf(\"/licenses/\") > 0) {\n                            //     licenseLink.href = licenseLink.href.replace(\"/licenses/\",\n                            // \"/api/v1/purchases/license/\");\n                            //     debug(\"TRYING AGAIN: \" + licenseLink.href);\n                            //     let newRes: any;\n                            //     try {\n                            //         newRes = await lsdLcpUpdate(lcp); // recursive\n                            //     } catch (err) {\n                            //         failure(err);\n                            //         return;\n                            //     }\n                            //     resolve(newRes);\n                            // } else {\n                            //     failure(\"HTTP CODE \" + response.statusCode);\n                            // }\n\n                            let failBuff: Buffer;\n                            try {\n                                failBuff = await streamToBufferPromise(response);\n                            } catch (buffErr) {\n                                if (IS_DEV) {\n                                    debug(buffErr);\n                                }\n                                failure(response.statusCode);\n                                return;\n                            }\n                            try {\n                                const failStr = failBuff.toString(\"utf8\");\n                                if (IS_DEV) {\n                                    debug(failStr);\n                                }\n                                tryErrorJson(failStr);\n                            } catch (strErr) {\n                                if (IS_DEV) {\n                                    debug(strErr);\n                                }\n                                failure(response.statusCode);\n                            }\n                            return;\n                        }\n\n                        let responseData: Buffer;\n                        try {\n                            responseData = await streamToBufferPromise(response);\n                        } catch (err) {\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(err);\n                            return;\n                        }\n                        const lcplStr = responseData.toString(\"utf8\");\n                        if (IS_DEV) {\n                            debug(lcplStr);\n                        }\n\n                        try {\n                            const tryLcpJson = global.JSON.parse(lcplStr);\n                            // tslint:disable-next-line:max-line-length\n                            if (!tryLcpJson.id || !tryLcpJson.issued || !tryLcpJson.provider || !tryLcpJson.encryption || !tryLcpJson.encryption.profile) {\n                                if (IS_DEV) {\n                                    debug(lcplStr);\n                                    debug(\"NOT AN LCP LICENSE!\"); // Some LCP servers respond 200 with error message!\n                                }\n                                tryErrorJson(lcplStr);\n                                return;\n                            }\n                        } catch (jsonErr) {\n                            if (IS_DEV) {\n                                debug(jsonErr);\n                            }\n                            tryErrorJson(lcplStr);\n                            return;\n                        }\n\n                        resolve(lcplStr);\n                    };\n\n                    const headers = Object.assign({\n                        \"Accept\": \"application/json,application/xml\",\n                        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                        \"User-Agent\": \"Readium2-LCP\",\n                    }, httpHeaders ? httpHeaders : {});\n\n                    // // No response streaming! :(\n                    // // https://github.com/request/request-promise/issues/90\n                    // const needsStreamingResponse = true;\n                    // if (needsStreamingResponse) {\n                        request.get({\n                            headers,\n                            method: \"GET\",\n                            timeout: 2000,\n                            uri: licenseLink.Href,\n                        })\n                            .on(\"response\", async (res) => {\n                                try {\n                                    await success(res);\n                                }\n                                catch (successError) {\n                                    failure(successError);\n                                    return;\n                                }\n                            })\n                            .on(\"error\", failure);\n                    // } else {\n                    //     let response: requestPromise.FullResponse;\n                    //     try {\n                    //         // tslint:disable-next-line:await-promise no-floating-promises\n                    //         response = await requestPromise({\n                    //             headers,\n                    //             method: \"GET\",\n                    //             resolveWithFullResponse: true,\n                    //             uri: licenseLink.Href,\n                    //         });\n                    //     } catch (err) {\n                    //         failure(err);\n                    //         return;\n                    //     }\n\n                    //     await success(response);\n                    // }\n                });\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    return Promise.reject(\"No LSD LCP update.\");\n}\n"]}