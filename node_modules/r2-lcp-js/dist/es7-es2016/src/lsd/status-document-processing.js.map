{"version":3,"file":"status-document-processing.js","sourceRoot":"","sources":["../../../../src/lsd/status-document-processing.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\n// import * as requestPromise from \"request-promise-native\";\n\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\n\nimport { LCP } from \"../parser/epub/lcp\";\nimport { LSD, StatusEnum } from \"../parser/epub/lsd\";\nimport { TaJsonDeserialize } from \"../serializable\";\nimport { IDeviceIDManager } from \"./deviceid-manager\";\nimport { lsdLcpUpdate } from \"./lcpl-update\";\nimport { lsdRegister_ } from \"./register\";\n\nconst debug = debug_(\"r2:lcp#lsd/status-document-processing\");\n\nconst IS_DEV = (process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"dev\");\n\nexport async function launchStatusDocumentProcessing(\n    lcp: LCP,\n    deviceIDManager: IDeviceIDManager,\n    onStatusDocumentProcessingComplete: (licenseUpdateJson: string | undefined) => void,\n    httpHeaders?: { [key: string]: string; }) {\n\n    if (!lcp || !lcp.Links) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n        return;\n    }\n    const linkStatus = lcp.Links.find((link) => {\n        return link.Rel === \"status\";\n    });\n    if (!linkStatus) {\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n        return;\n    }\n\n    if (IS_DEV) {\n        debug(linkStatus);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const failure = (err: any) => {\n        debug(err);\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n    };\n\n    const success = async (response: request.RequestResponse) => {\n\n        if (IS_DEV) {\n            Object.keys(response.headers).forEach((header: string) => {\n                debug(header + \" => \" + response.headers[header]);\n            });\n        }\n\n        if (response.statusCode && (response.statusCode < 200 || response.statusCode >= 300)) {\n            let failBuff: Buffer;\n            try {\n                failBuff = await streamToBufferPromise(response);\n            } catch (buffErr) {\n                if (IS_DEV) {\n                    debug(buffErr);\n                }\n                failure(response.statusCode);\n                return;\n            }\n            try {\n                const failStr = failBuff.toString(\"utf8\");\n                if (IS_DEV) {\n                    debug(failStr);\n                }\n                try {\n                    const failJson = global.JSON.parse(failStr);\n                    if (IS_DEV) {\n                        debug(failJson);\n                    }\n                    failJson.httpStatusCode = response.statusCode;\n                    failure(failJson);\n                } catch (jsonErr) {\n                    if (IS_DEV) {\n                        debug(jsonErr);\n                    }\n                    failure({ httpStatusCode: response.statusCode, httpResponseBody: failStr });\n                }\n            } catch (strErr) {\n                if (IS_DEV) {\n                    debug(strErr);\n                }\n                failure(response.statusCode);\n            }\n            return;\n        }\n\n        let responseData: Buffer;\n        try {\n            responseData = await streamToBufferPromise(response);\n        } catch (err) {\n            debug(err);\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(undefined);\n            }\n            return;\n        }\n        const responseStr = responseData.toString(\"utf8\");\n\n        // https://github.com/readium/readium-lcp-specs/issues/15#issuecomment-358247286\n        // application/vnd.readium.lcp.license-1.0+json (LEGACY)\n        // application/vnd.readium.lcp.license.v1.0+json (NEW)\n        // application/vnd.readium.license.status.v1.0+json (LSD)\n        const mime = \"application/vnd.readium.license.status.v1.0+json\";\n        if (IS_DEV) {\n            if (response.headers[\"content-type\"] === mime ||\n                response.headers[\"content-type\"] === \"application/json\") {\n                debug(responseStr);\n            }\n        }\n        const lsdJSON = global.JSON.parse(responseStr);\n        if (IS_DEV) {\n            debug(lsdJSON);\n        }\n\n        try {\n            lcp.LSD = TaJsonDeserialize<LSD>(lsdJSON, LSD);\n            if (IS_DEV) {\n                debug(lcp.LSD);\n            }\n        } catch (err) {\n            debug(err);\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(undefined);\n            }\n            return;\n        }\n\n        // debug(lsdJson.id);\n        // debug(lsdJson.status); // revoked, returned, cancelled, expired\n        // debug(lsdJson.message);\n        // if (lsdJson.updated) {\n        //     debug(lsdJson.updated.license);\n        //     debug(lsdJson.updated.status);\n        // }\n        // if (lsdJson.links) {\n        //     lsdJson.links.forEach((link: any) => {\n        //         debug(link.rel); // license, register, return, renew\n        //         debug(link.href);\n        //         debug(link.type);\n        //         debug(link.templated);\n        //         debug(link.title);\n        //         debug(link.profile);\n        //     });\n        // }\n        // if (lsdJson.potential_rights) {\n        //     debug(lsdJson.potential_rights.end);\n        // }\n        // if (lsdJson.events) {\n        //     lsdJson.events.forEach((event: any) => {\n        //         debug(event.type);\n        //         debug(event.name);\n        //         debug(event.timestamp); // ISO 8601 time and date\n        //         debug(event.id);\n        //     });\n        // }\n\n        let licenseUpdateResponseJson: string | undefined;\n        try {\n            licenseUpdateResponseJson = await lsdLcpUpdate(lcp, httpHeaders);\n        } catch (err) {\n            debug(err);\n            // if (onStatusDocumentProcessingComplete) {\n            //     onStatusDocumentProcessingComplete();\n            // }\n            // return;\n        }\n        if (licenseUpdateResponseJson) {\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(licenseUpdateResponseJson);\n            }\n            return;\n        }\n\n        // lcp.LSD.Status !== StatusEnum.Active && lcp.LSD.Status !== StatusEnum.Ready\n        if (lcp.LSD.Status === StatusEnum.Revoked\n            || lcp.LSD.Status === StatusEnum.Returned\n            || lcp.LSD.Status === StatusEnum.Cancelled\n            || lcp.LSD.Status === StatusEnum.Expired) {\n\n            debug(\"What?! LSD status:\" + lcp.LSD.Status);\n            // This should really never happen,\n            // as the LCP license should not even have passed validation\n            // due to expired end date / timestamp\n            if (onStatusDocumentProcessingComplete) {\n                onStatusDocumentProcessingComplete(undefined);\n            }\n            return;\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let registerResponse: any;\n        try {\n            registerResponse = await lsdRegister_(lcp.LSD, deviceIDManager, httpHeaders);\n        } catch (err) {\n            debug(err);\n        }\n        if (registerResponse) {\n            lcp.LSD = registerResponse;\n            if (IS_DEV) {\n                debug(lcp.LSD);\n            }\n        }\n        if (onStatusDocumentProcessingComplete) {\n            onStatusDocumentProcessingComplete(undefined);\n        }\n    };\n\n    const headers = Object.assign({\n        \"Accept\": \"application/json,application/xml\",\n        \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n        \"User-Agent\": \"Readium2-LCP\",\n    }, httpHeaders ? httpHeaders : {});\n\n    // // No response streaming! :(\n    // // https://github.com/request/request-promise/issues/90\n    // const needsStreamingResponse = true;\n    // if (needsStreamingResponse) {\n        request.get({\n            headers,\n            method: \"GET\",\n            timeout: 2000,\n            uri: linkStatus.Href,\n        })\n            .on(\"response\", async (res) => {\n                try {\n                    await success(res);\n                }\n                catch (successError) {\n                    failure(successError);\n                    return;\n                }\n            })\n            .on(\"error\", failure);\n    // } else {\n    //     let response: requestPromise.FullResponse;\n    //     try {\n    //         // tslint:disable-next-line:await-promise no-floating-promises\n    //         response = await requestPromise({\n    //             headers,\n    //             method: \"GET\",\n    //             resolveWithFullResponse: true,\n    //             uri: linkStatus.Href,\n    //         });\n    //     } catch (err) {\n    //         failure(err);\n    //         return;\n    //     }\n\n    //     await success(response);\n    // }\n}\n"]}