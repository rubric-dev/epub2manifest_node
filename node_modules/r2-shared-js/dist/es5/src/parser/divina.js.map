{"version":3,"file":"divina.js","sourceRoot":"","sources":["../../../../src/parser/divina.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { TaJsonDeserialize } from \"@r2-lcp-js/serializable\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { traverseJsonObjects } from \"@r2-utils-js/_utils/JsonUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\n\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\n\nconst debug = debug_(\"r2:shared#parser/divina\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction absolutizeURLs(rootUrl: string, jsonObj: any) {\n    traverseJsonObjects(jsonObj,\n        (obj) => {\n            if (obj.href && typeof obj.href === \"string\"\n                && !isHTTP(obj.href)) {\n                // obj.href_ = obj.href;\n                obj.href = rootUrl + \"/\" + obj.href;\n            }\n        });\n}\n\n// tslint:disable-next-line:max-line-length\nexport async function DivinaParsePromise(filePath: string, isDivina?: Divinais, pubtype?: string): Promise<Publication> {\n\n    const isAnDivina = isDivina || await isDivinaPublication(filePath);\n\n    const publicationType = pubtype || (isAnDivina ? \"divina\" : \"generic\");\n\n    // // excludes Divinais.RemoteExploded\n    // const canLoad = isAnDivina === Divinais.LocalExploded ||\n    //     isAnDivina === Divinais.LocalPacked ||\n    //     isAnDivina === Divinais.RemotePacked;\n    // if (!canLoad) {\n    //     // TODO? r2-utils-js zip-ext.ts => variant for HTTP without directory listing? (no deterministic zip entries)\n    //     const err = \"Cannot load exploded remote EPUB (needs filesystem access to list directory contents).\";\n    //     debug(err);\n    //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    //     return Promise.reject(err);\n    // }\n\n    let entryName = \"manifest.json\";\n\n    let filePathToLoad = filePath;\n    if (isAnDivina === Divinais.LocalExploded) { // (must ensure is directory/folder)\n        filePathToLoad = path.dirname(filePathToLoad) + \"/\";\n    } else if (isAnDivina === Divinais.RemoteExploded) {\n        const url = new URL(filePathToLoad);\n        entryName = path.basename(url.pathname);\n        url.pathname = path.dirname(url.pathname) + \"/\";\n\n        // contains trailing slash\n        filePathToLoad = url.toString();\n    }\n\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePathToLoad);\n    } catch (err) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"Divina zip empty\");\n    }\n    if (isAnDivina === Divinais.LocalExploded ||\n        isAnDivina === Divinais.LocalPacked) {\n\n        const has = await zipHasEntry(zip, entryName, undefined);\n        if (!has) {\n            const zipEntries = await zip.getEntries();\n            for (const zipEntry of zipEntries) {\n                if (zipEntry.startsWith(\"__MACOSX/\")) {\n                    continue;\n                }\n                debug(zipEntry);\n            }\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"Divina no manifest?!\");\n        }\n    }\n\n    // let entries: string[];\n    // try {\n    //     entries = await zip.getEntries();\n    // } catch (err) {\n    //     console.log(err);\n    //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    //     return Promise.reject(\"Problem getting Divina zip entries\");\n    // }\n    // for (const entryName of entries) {\n    //     // debug(\"++ZIP: entry\");\n    //     // debug(entryName);\n\n    //     if (entryName === \"manifest.json\") {\n    //         // import { tryDecodeURI } from \"../_utils/decodeURI\";\n    //         // const entryNameDecoded = tryDecodeURI(entryName);\n    //         // if (!entryNameDecoded) {\n    //         //     return Promise.reject(`Cannot decode URI?! ${entryName}`);\n    //         // }\n    //     }\n    // }\n\n    let manifestZipStream_: IStreamAndLength;\n    try {\n        manifestZipStream_ = await zip.entryStreamPromise(entryName);\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(`Problem streaming Divina zip entry?! ${entryName}`);\n    }\n    const manifestZipStream = manifestZipStream_.stream;\n    let manifestZipData: Buffer;\n    try {\n        manifestZipData = await streamToBufferPromise(manifestZipStream);\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(`Problem buffering Divina zip entry?! ${entryName}`);\n    }\n\n    const manifestJsonStr = manifestZipData.toString(\"utf8\");\n    const manifestJson = JSON.parse(manifestJsonStr);\n\n    if (isAnDivina === Divinais.RemoteExploded) {\n        const url = new URL(filePath);\n        url.pathname = path.dirname(url.pathname);\n        absolutizeURLs(url.toString(), manifestJson);\n    }\n\n    const publication = TaJsonDeserialize<Publication>(manifestJson, Publication);\n\n    publication.AddToInternal(\"type\", publicationType);\n    publication.AddToInternal(\"zip\", zip);\n\n    const lcpEntryName = \"license.lcpl\";\n    let checkLCP = true; // allows isAnDivina === Divinais.RemoteExploded\n    let hasLCP = false; // only if zipHasEntry() verifies presence of lcpEntryName (Divinais.LocalExploded|Packed)\n    if (isAnDivina === Divinais.LocalExploded ||\n        isAnDivina === Divinais.LocalPacked) {\n        const has = await zipHasEntry(zip, lcpEntryName, undefined);\n        if (!has) {\n            checkLCP = false;\n        } else {\n            hasLCP = true;\n        }\n    }\n    if (checkLCP) {\n        let lcpZipStream_: IStreamAndLength | undefined;\n        try {\n            lcpZipStream_ = await zip.entryStreamPromise(lcpEntryName);\n        } catch (err) {\n            if (hasLCP) {\n                debug(err);\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(`Problem streaming Divina LCP zip entry?! ${entryName}`);\n            } else {\n                debug(\"Divina no LCP.\");\n            }\n            checkLCP = false;\n        }\n        if (checkLCP && lcpZipStream_) {\n            const lcpZipStream = lcpZipStream_.stream;\n            let lcpZipData: Buffer;\n            try {\n                lcpZipData = await streamToBufferPromise(lcpZipStream);\n            } catch (err) {\n                debug(err);\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(`Problem buffering Divina LCP zip entry?! ${entryName}`);\n            }\n\n            const lcpJsonStr = lcpZipData.toString(\"utf8\");\n            const lcpJson = JSON.parse(lcpJsonStr);\n\n            const lcpl = TaJsonDeserialize<LCP>(lcpJson, LCP);\n            lcpl.ZipPath = lcpEntryName;\n            lcpl.JsonSource = lcpJsonStr;\n            lcpl.init();\n\n            publication.LCP = lcpl;\n        }\n    }\n\n    return Promise.resolve(publication);\n}\n\n// https://github.com/readium/divina-player-js/blob/master/public/webtoon/manifest.json\n// curl -s -L -I -X GET xxx\n// Content-Type: application/divina+json; charset=utf-8\nexport enum Divinais {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    RemotePacked = \"RemotePacked\",\n}\n\nasync function doRequest(u: string): Promise<Divinais | undefined> {\n    return new Promise<Divinais | undefined>((resolve, _reject) => {\n        const url = new URL(u);\n        const secure = url.protocol === \"https:\";\n        const options = {\n            headers: {\n                \"Accept\": \"*/*,application/divina+json\",\n                \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                \"Host\": url.host,\n                \"User-Agent\": \"Readium2-Divinas\",\n            },\n            host: url.host,\n            method: \"GET\",\n            path: url.pathname + url.search,\n            port: secure ? 443 : 80,\n            protocol: url.protocol,\n        };\n        debug(JSON.stringify(options));\n        (secure ? https : http).request(options, (res) => {\n            if (!res) {\n                resolve(undefined);\n                // reject(`HTTP no response ${u}`);\n                return;\n            }\n\n            debug(res.statusCode);\n            debug(JSON.stringify(res.headers));\n\n            if (res.statusCode && (res.statusCode >= 300 && res.statusCode < 400)) {\n                const loc = res.headers.Location || res.headers.location;\n                if (loc && loc.length) {\n                    const l = Array.isArray(loc) ? loc[0] : loc;\n                    process.nextTick(async () => {\n                        try {\n                            const redirectRes = await doRequest(l);\n                            resolve(redirectRes);\n                        } catch (_err) {\n                            resolve(undefined);\n                            // reject(`HTTP Divina redirect, then fail ${u} ${err}`);\n                        }\n                    });\n                } else {\n                    resolve(undefined);\n                    // reject(`HTTP Divina redirect without location?! ${u}`);\n                }\n                return;\n            }\n            const type = res.headers[\"Content-Type\"] || res.headers[\"content-type\"];\n            if (type) {\n                if (type.includes(\"application/divina+json\")) {\n                    resolve(Divinais.RemoteExploded);\n                    return;\n                }\n                if (type.includes(\"application/json\")) {\n                    res.setEncoding(\"utf8\");\n\n                    let responseBody = \"\";\n                    res.on(\"data\", (chunk) => {\n                        responseBody += chunk;\n                    });\n                    res.on(\"end\", () => {\n                        try {\n                            const manJson = JSON.parse(responseBody);\n                            if (manJson.metadata && manJson.metadata[\"@type\"] &&\n                                (/https?:\\/\\/schema\\.org\\/VisualArtwork$/.test(manJson.metadata[\"@type\"]) ||\n                                /https?:\\/\\/schema\\.org\\/ComicStory$/.test(manJson.metadata[\"@type\"]))\n                            ) {\n                                resolve(Divinais.RemoteExploded);\n                                return;\n                            } else {\n                                resolve(undefined);\n                                // reject(`HTTP JSON not Divina ${u}`);\n                            }\n                        } catch (ex) {\n                            debug(ex);\n                            resolve(undefined);\n                            // reject(`HTTP Divina invalid JSON?! ${u} ${ex}`);\n                        }\n                    });\n\n                    return;\n                }\n            }\n            resolve(undefined);\n            // reject(`Not HTTP Divina type ${u}`);\n        }).on(\"error\", (err) => {\n            debug(err);\n            resolve(undefined);\n            // reject(`HTTP error ${u} ${err}`);\n        }).end();\n    });\n}\n\nexport async function isDivinaPublication(urlOrPath: string): Promise<Divinais | undefined> {\n    let p = urlOrPath;\n    const isHttp = isHTTP(urlOrPath);\n    if (isHttp) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    }\n\n    const fileName = path.basename(p);\n    const ext = path.extname(fileName);\n\n    const dnva = /\\.divina$/i.test(ext);\n    const dnvaLcp = /\\.lcpdivina$/i.test(ext);\n    if (dnva || dnvaLcp) {\n        // return isHttp ? Divinais.RemotePacked : Divinais.LocalPacked;\n        if (!isHttp) {\n            return Divinais.LocalPacked;\n        }\n    }\n\n    if (!isHttp && fileName === \"manifest.json\") {\n        // const manPath = fileName === \"manifest.json\" ? p : path.join(p, \"manifest.json\");\n        if (fs.existsSync(p)) {\n            const manStr = fs.readFileSync(p, { encoding: \"utf8\" });\n            const manJson = JSON.parse(manStr);\n            if (manJson.metadata && manJson.metadata[\"@type\"] &&\n                (/https?:\\/\\/schema\\.org\\/VisualArtwork$/.test(manJson.metadata[\"@type\"]) ||\n                /https?:\\/\\/schema\\.org\\/ComicStory$/.test(manJson.metadata[\"@type\"]))\n            ) {\n                return Divinais.LocalExploded;\n            }\n        }\n    }\n\n    // // filePath.replace(/\\//, \"/\").endsWith(\"divina/manifest.json\")\n    // if (/divina[\\/|\\\\]manifest.json$/.test(p)) {\n    //     return isHttp ? Divinais.RemoteExploded : Divinais.LocalExploded;\n    // }\n\n    if (isHttp) {\n        return doRequest(urlOrPath);\n    }\n\n    return Promise.resolve(undefined);\n    // // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    // return Promise.reject(\"Cannot determine Divina type\");\n}\n"]}