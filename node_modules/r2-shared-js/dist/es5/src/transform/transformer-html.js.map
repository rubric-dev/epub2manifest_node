{"version":3,"file":"transformer-html.js","sourceRoot":"","sources":["../../../../src/transform/transformer-html.ts"],"names":[],"mappings":";;;;AAOA,8BAAgC;AAChC,iCAAmC;AAInC,sEAA+F;AAK/F,IAAM,KAAK,GAAG,MAAM,CAAC,sCAAsC,CAAC,CAAC;AAU7D;IAII,yBAAY,mBAAuC;QAC/C,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC;IAC/C,CAAC;IAEM,kCAAQ,GAAf,UAAgB,YAAyB,EAAE,IAAU;QAEjD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,CAAC;QAED,IAAI,SAAS,KAAK,WAAW,IAAI,SAAS,KAAK,uBAAuB,EAAE,CAAC;YAarE,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEY,yCAAe,GAA5B,UACI,WAAwB,EACxB,IAAU,EACV,GAAuB,EACvB,MAAwB,EACxB,0BAAmC,EACnC,iBAAyB,EACzB,eAAuB,EACvB,WAA+B;;;;;;;;wBAKpB,WAAM,IAAA,mCAAqB,EAAC,MAAM,CAAC,MAAM,CAAC,EAAA;;wBAAjD,IAAI,GAAG,SAA0C,CAAC;;;;wBAGlD,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;;wBAKpB,WAAM,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,CAAC,EAAA;;wBAA5E,IAAI,GAAG,SAAqE,CAAC;;;;wBAG7E,WAAO,OAAO,CAAC,MAAM,CAAC,KAAG,CAAC,EAAC;;wBAGzB,GAAG,GAAqB;4BAC1B,MAAM,EAAE,IAAI,CAAC,MAAM;4BACnB,KAAK,EAAE;;oCACH,WAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC;;iCAC/B;4BACD,MAAM,EAAE,IAAA,4BAAc,EAAC,IAAI,CAAC;yBAC/B,CAAC;wBACF,WAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC;;;;KAC/B;IAEa,yCAAe,GAA7B,UACI,WAAwB,EACxB,IAAU,EACV,GAAuB,EACvB,IAAY,EACZ,WAA+B;;;;gBAG/B,IAAI,CAAC;oBACK,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBAC5B,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;oBAC5E,WAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAC;gBAC9C,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACX,KAAK,CAAC,mCAAmC,CAAC,CAAC;oBAC3C,KAAK,CAAC,GAAG,CAAC,CAAC;oBACX,WAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC;gBACjC,CAAC;;;;KACJ;IACL,sBAAC;AAAD,CAAC,AAzFD,IAyFC;AAzFY,0CAAe","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as mime from \"mime-types\";\n\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { bufferToStream, streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { IStreamAndLength } from \"@r2-utils-js/_utils/zip/zip\";\n\nimport { ITransformer } from \"./transformer\";\n\nconst debug = debug_(\"r2:shared#transform/transformer-html\");\n\nexport type TTransformFunction = (\n    publication: Publication,\n    link: Link,\n    url: string | undefined,\n    data: string,\n    sessionInfo: string | undefined,\n) => string;\n\nexport class TransformerHTML implements ITransformer {\n\n    private readonly transformString: TTransformFunction;\n\n    constructor(transformerFunction: TTransformFunction) {\n        this.transformString = transformerFunction;\n    }\n\n    public supports(_publication: Publication, link: Link): boolean {\n\n        let mediaType = mime.lookup(link.Href);\n        if (link && link.TypeLink) {\n            mediaType = link.TypeLink;\n        }\n\n        if (mediaType === \"text/html\" || mediaType === \"application/xhtml+xml\") {\n            // const pubDefinesLayout = publication.Metadata && publication.Metadata.Rendition\n            //     && publication.Metadata.Rendition.Layout;\n            // const pubIsFixed = pubDefinesLayout && publication.Metadata.Rendition.Layout === \"fixed\";\n\n            // const linkDefinesLayout = link.Properties && link.Properties.Layout;\n            // const linkIsFixed = linkDefinesLayout && link.Properties.Layout === \"fixed\";\n\n            // if (linkIsFixed || pubIsFixed) {\n            //     return false;\n            // }\n\n            // pass: reflow doc or fixed layout (e.g. not for ReadiumCSS, but for audio/video patch)\n            return true;\n        }\n\n        return false;\n    }\n\n    public async transformStream(\n        publication: Publication,\n        link: Link,\n        url: string | undefined,\n        stream: IStreamAndLength,\n        _isPartialByteRangeRequest: boolean,\n        _partialByteBegin: number,\n        _partialByteEnd: number,\n        sessionInfo: string | undefined,\n        ): Promise<IStreamAndLength> {\n\n        let data: Buffer;\n        try {\n            data = await streamToBufferPromise(stream.stream);\n        } catch (err) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(err);\n        }\n\n        let buff: Buffer;\n        try {\n            buff = await this.transformBuffer(publication, link, url, data, sessionInfo);\n        } catch (err) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(err);\n        }\n\n        const sal: IStreamAndLength = {\n            length: buff.length,\n            reset: async () => {\n                return Promise.resolve(sal);\n            },\n            stream: bufferToStream(buff),\n        };\n        return Promise.resolve(sal);\n    }\n\n    private async transformBuffer(\n        publication: Publication,\n        link: Link,\n        url: string | undefined,\n        data: Buffer,\n        sessionInfo: string | undefined,\n    ): Promise<Buffer> {\n\n        try {\n            const str = data.toString(\"utf8\");\n            const str_ = this.transformString(publication, link, url, str, sessionInfo);\n            return Promise.resolve(Buffer.from(str_));\n        } catch (err) {\n            debug(\"TransformerHTML fail => no change\");\n            debug(err);\n            return Promise.resolve(data); //  no change\n        }\n    }\n}\n"]}