{"version":3,"file":"test.js","sourceRoot":"","sources":["../../../test/test.ts"],"names":[],"mappings":"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","sourcesContent":["import test from \"ava\";\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as jsonDiff from \"json-diff\";\nimport * as path from \"path\";\n\nimport { timeStrToSeconds } from \"@models/media-overlay\";\nimport { Publication } from \"@models/publication\";\nimport { PublicationParsePromise } from \"@parser/publication-parser\";\nimport { TaJsonDeserialize, TaJsonSerialize } from \"@r2-lcp-js/serializable\";\n\nimport { initGlobalConverters_GENERIC, initGlobalConverters_SHARED } from \"../src/init-globals\";\n\n// import * as filehound from \"filehound\";\n\ninitGlobalConverters_SHARED();\ninitGlobalConverters_GENERIC();\n\nconst debug = debug_(\"r2:shared#test\");\n\n// ==========================\n\nasync function fn() {\n    return Promise.resolve(\"foo\");\n}\ntest(\"dummy async test\", async (t) => {\n    debug(\"test ASYNC\");\n    t.is(await fn(), \"foo\");\n});\n\n// ==========================\n\ntest(\"SMIL clock values\", (t) => {\n    t.plan(16);\n\n    t.is(timeStrToSeconds(\"12.345\"), 12.345);\n    t.is(timeStrToSeconds(\"2345ms\"), 2.345);\n    t.is(timeStrToSeconds(\"345ms\"), 0.345);\n    t.is(timeStrToSeconds(\"7.75h\"), 27900);\n    t.is(timeStrToSeconds(\"76.2s\"), 76.2);\n    t.is(timeStrToSeconds(\"00:56.78\"), 56.78);\n    t.is(timeStrToSeconds(\"09:58\"), 598);\n    t.is(timeStrToSeconds(\"09.5:58\"), 628);\n    t.is(timeStrToSeconds(\"0:00:04\"), 4);\n    t.is(timeStrToSeconds(\"0:05:01.2\"), 301.2);\n    t.is(timeStrToSeconds(\"124:59:36\"), 449976);\n    t.is(timeStrToSeconds(\"5:34:31.396\"), 20071.396);\n    t.is(timeStrToSeconds(\"5:34.5:31.396\"), 20101.396);\n\n    t.is(timeStrToSeconds(\"7.5z\"), 7.5);\n    t.is(timeStrToSeconds(\"4:5:34:31.396\"), 0);\n    t.is(timeStrToSeconds(\"\"), 0);\n});\n\n// ==========================\n\nasync function delay(okay: boolean): Promise<boolean> {\n    return new Promise((resolve, _reject) => {\n        setTimeout(() => {\n            resolve(okay);\n        }, 1000);\n    });\n}\n\ntest(\"EPUB parsing (de)serialize roundtrip\", async (t) => {\n\n    const dirPath = path.join(process.cwd(), \"misc/epubs/\");\n\n    // const filePaths: string[] = await filehound.create()\n    //     .discard(\"node_modules\")\n    //     .depth(5)\n    //     .paths(dirPath)\n    //     .ext([\".epub\", \".epub3\"])\n    //     .find();\n    const filePaths = fs.readdirSync(dirPath, { withFileTypes: true }).\n        filter((f) => f.isFile() && /\\.epub3?$/i.test(f.name)).map((f) => path.join(dirPath, f.name));\n\n    for (const filePath of filePaths) {\n        debug(\"------------------------\");\n        debug(filePath);\n        // debug(\"------------------------\");\n\n        let pub: Publication;\n        try {\n            pub = await PublicationParsePromise(filePath);\n        } catch (err) {\n            console.log(err);\n            continue;\n        }\n        const publicationJson1 = TaJsonSerialize(pub);\n        const publication = TaJsonDeserialize<Publication>(publicationJson1, Publication);\n        const publicationJson2 = TaJsonSerialize(publication);\n\n        const str1 = JSON.stringify(publicationJson1, null, 2);\n        const str2 = JSON.stringify(publicationJson2, null, 2);\n\n        if (str1 !== str2) {\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"#### JSON DIFF\\n\");\n            process.stdout.write(jsonDiff.diffString(publicationJson1, publicationJson2) + \"\\n\");\n            process.stdout.write(\"###########################\\n\");\n            process.stdout.write(\"###########################\\n\");\n\n            t.true(await delay(false));\n            return;\n        }\n    }\n\n    t.true(await delay(true));\n});\n"]}