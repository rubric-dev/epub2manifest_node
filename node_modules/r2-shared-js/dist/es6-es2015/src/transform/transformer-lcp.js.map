{"version":3,"file":"transformer-lcp.js","sourceRoot":"","sources":["../../../../src/transform/transformer-lcp.ts"],"names":[],"mappings":";;;;AAUA,0EAE8C;AAQ9C,MAAa,cAAc;IAEhB,QAAQ,CAAC,WAAwB,EAAE,IAAU;QAChD,OAAO,CAAC,OAAO,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC;YAC3C,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS;YAC5C,IAAA,0BAAS,EAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IACzE,CAAC;IAEY,eAAe,CACxB,WAAwB,EACxB,IAAU,EACV,IAAwB,EACxB,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EACxB,cAAsB,EACtB,YAAgC;;YAGhC,OAAO,IAAA,iCAAgB,EAAC,WAAW,CAAC,GAAU,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAC5E,MAAM,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,cAAc,CAAC,CAAC;QACjF,CAAC;KAAA;CACJ;AAtBD,wCAsBC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport {\n    supports as supports_, transformStream as transformStream_,\n} from \"@r2-lcp-js/transform/transformer-lcp\";\nimport { IStreamAndLength } from \"@r2-utils-js/_utils/zip/zip\";\n\nimport { ITransformer } from \"./transformer\";\n\n// import * as debug_ from \"debug\";\n// const debug = debug_(\"r2:shared#transform/transformer-lcp\");\n\nexport class TransformerLCP implements ITransformer {\n\n    public supports(publication: Publication, link: Link): boolean {\n        return (typeof publication.LCP !== \"undefined\") &&\n            link.Properties && link.Properties.Encrypted &&\n            supports_(publication.LCP, link.Href, link.Properties.Encrypted);\n    }\n\n    public async transformStream(\n        publication: Publication,\n        link: Link,\n        _url: string | undefined,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number,\n        partialByteEnd: number,\n        _sessionInfo: string | undefined,\n    ): Promise<IStreamAndLength> {\n\n        return transformStream_(publication.LCP as LCP, link.Href, link.Properties.Encrypted,\n                stream, isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n    }\n}\n"]}