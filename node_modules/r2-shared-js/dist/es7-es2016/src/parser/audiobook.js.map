{"version":3,"file":"audiobook.js","sourceRoot":"","sources":["../../../../src/parser/audiobook.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as https from \"https\";\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { LCP } from \"@r2-lcp-js/parser/epub/lcp\";\nimport { TaJsonDeserialize } from \"@r2-lcp-js/serializable\";\nimport { isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { traverseJsonObjects } from \"@r2-utils-js/_utils/JsonUtils\";\nimport { streamToBufferPromise } from \"@r2-utils-js/_utils/stream/BufferUtils\";\nimport { IStreamAndLength, IZip } from \"@r2-utils-js/_utils/zip/zip\";\nimport { zipLoadPromise } from \"@r2-utils-js/_utils/zip/zipFactory\";\n\nimport { zipHasEntry } from \"../_utils/zipHasEntry\";\n\nconst debug = debug_(\"r2:shared#parser/audiobook\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction absolutizeURLs(rootUrl: string, jsonObj: any) {\n    traverseJsonObjects(jsonObj,\n        (obj) => {\n            if (obj.href && typeof obj.href === \"string\"\n                && !isHTTP(obj.href)) {\n                // obj.href_ = obj.href;\n                obj.href = rootUrl + \"/\" + obj.href;\n            }\n        });\n}\n\nexport async function AudioBookParsePromise(filePath: string, isAudio?: AudioBookis): Promise<Publication> {\n\n    const isAnAudioBook = isAudio || await isAudioBookPublication(filePath);\n\n    // // excludes AudioBookis.RemoteExploded\n    // const canLoad = isAnAudioBook === AudioBookis.LocalExploded ||\n    //     isAnAudioBook === AudioBookis.LocalPacked ||\n    //     isAnAudioBook === AudioBookis.RemotePacked;\n    // if (!canLoad) {\n    //     // TODO? r2-utils-js zip-ext.ts => variant for HTTP without directory listing? (no deterministic zip entries)\n    //     const err = \"Cannot load exploded remote EPUB (needs filesystem access to list directory contents).\";\n    //     debug(err);\n    //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    //     return Promise.reject(err);\n    // }\n\n    let entryName = \"manifest.json\";\n\n    let filePathToLoad = filePath;\n    if (isAnAudioBook === AudioBookis.LocalExploded) { // (must ensure is directory/folder)\n        filePathToLoad = path.dirname(filePathToLoad) + \"/\";\n    } else if (isAnAudioBook === AudioBookis.RemoteExploded) {\n        const url = new URL(filePathToLoad);\n        entryName = path.basename(url.pathname);\n        url.pathname = path.dirname(url.pathname) + \"/\";\n\n        // contains trailing slash\n        filePathToLoad = url.toString();\n    }\n\n    let zip: IZip;\n    try {\n        zip = await zipLoadPromise(filePathToLoad);\n    } catch (err) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(err);\n    }\n\n    if (!zip.hasEntries()) {\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(\"AudioBook zip empty\");\n    }\n    if (isAnAudioBook === AudioBookis.LocalExploded ||\n        isAnAudioBook === AudioBookis.LocalPacked) {\n\n        const has = await zipHasEntry(zip, entryName, undefined);\n        if (!has) {\n            const zipEntries = await zip.getEntries();\n            for (const zipEntry of zipEntries) {\n                if (zipEntry.startsWith(\"__MACOSX/\")) {\n                    continue;\n                }\n                debug(zipEntry);\n            }\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"AudioBook no manifest?!\");\n        }\n    }\n\n    // let entries: string[];\n    // try {\n    //     entries = await zip.getEntries();\n    // } catch (err) {\n    //     console.log(err);\n    //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    //     return Promise.reject(\"Problem getting AudioBook zip entries\");\n    // }\n    // for (const entryName of entries) {\n    //     // debug(\"++ZIP: entry\");\n    //     // debug(entryName);\n\n    //     if (entryName === \"manifest.json\") {\n    //         // import { tryDecodeURI } from \"../_utils/decodeURI\";\n    //         // const entryNameDecoded = tryDecodeURI(entryName);\n    //         // if (!entryNameDecoded) {\n    //         //     return Promise.reject(`Cannot decode URI?! ${entryName}`);\n    //         // }\n    //     }\n    // }\n\n    let manifestZipStream_: IStreamAndLength;\n    try {\n        manifestZipStream_ = await zip.entryStreamPromise(entryName);\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(`Problem streaming AudioBook zip entry?! ${entryName}`);\n    }\n    const manifestZipStream = manifestZipStream_.stream;\n    let manifestZipData: Buffer;\n    try {\n        manifestZipData = await streamToBufferPromise(manifestZipStream);\n    } catch (err) {\n        debug(err);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(`Problem buffering AudioBook zip entry?! ${entryName}`);\n    }\n\n    const manifestJsonStr = manifestZipData.toString(\"utf8\");\n    const manifestJson = JSON.parse(manifestJsonStr);\n\n    if (isAnAudioBook === AudioBookis.RemoteExploded) {\n        const url = new URL(filePath);\n        url.pathname = path.dirname(url.pathname);\n        absolutizeURLs(url.toString(), manifestJson);\n    }\n\n    const publication = TaJsonDeserialize<Publication>(manifestJson, Publication);\n\n    publication.AddToInternal(\"type\", \"audiobook\");\n    publication.AddToInternal(\"zip\", zip);\n\n    const lcpEntryName = \"license.lcpl\";\n    let checkLCP = true; // allows isAnAudioBook === AudioBookis.RemoteExploded\n    let hasLCP = false; // only if zipHasEntry() verifies presence of lcpEntryName (AudioBookis.LocalExploded|Packed)\n    if (isAnAudioBook === AudioBookis.LocalExploded ||\n        isAnAudioBook === AudioBookis.LocalPacked) {\n        const has = await zipHasEntry(zip, lcpEntryName, undefined);\n        if (!has) {\n            checkLCP = false;\n        } else {\n            hasLCP = true;\n        }\n    }\n    if (checkLCP) {\n        let lcpZipStream_: IStreamAndLength | undefined;\n        try {\n            lcpZipStream_ = await zip.entryStreamPromise(lcpEntryName);\n        } catch (err) {\n            if (hasLCP) {\n                debug(err);\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(`Problem streaming AudioBook LCP zip entry?! ${entryName}`);\n            } else {\n                debug(\"Audiobook no LCP.\");\n            }\n            checkLCP = false;\n        }\n        if (checkLCP && lcpZipStream_) {\n            const lcpZipStream = lcpZipStream_.stream;\n            let lcpZipData: Buffer;\n            try {\n                lcpZipData = await streamToBufferPromise(lcpZipStream);\n            } catch (err) {\n                debug(err);\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(`Problem buffering AudioBook LCP zip entry?! ${entryName}`);\n            }\n\n            const lcpJsonStr = lcpZipData.toString(\"utf8\");\n            const lcpJson = JSON.parse(lcpJsonStr);\n\n            const lcpl = TaJsonDeserialize<LCP>(lcpJson, LCP);\n            lcpl.ZipPath = lcpEntryName;\n            lcpl.JsonSource = lcpJsonStr;\n            lcpl.init();\n\n            publication.LCP = lcpl;\n        }\n    }\n\n    return Promise.resolve(publication);\n}\n\n// https://api.archivelab.org/books/armand_durand/opds_audio_manifest\n// https://api.archivelab.org/books/art_letters_1809_librivox/opds_audio_manifest\n// curl -s -L -I -X GET xxx\n// Content-Type: application/audiobook+json; charset=utf-8\nexport enum AudioBookis {\n    LocalExploded = \"LocalExploded\",\n    LocalPacked = \"LocalPacked\",\n    RemoteExploded = \"RemoteExploded\",\n    // RemotePacked = \"RemotePacked\",\n}\n\nasync function doRequest(u: string): Promise<AudioBookis> {\n    return new Promise((resolve, reject) => {\n        const url = new URL(u);\n        const secure = url.protocol === \"https:\";\n        const options = {\n            headers: {\n                \"Accept\": \"*/*,application/audiobook+json\",\n                \"Accept-Language\": \"en-UK,en-US;q=0.7,en;q=0.5\",\n                \"Host\": url.host,\n                \"User-Agent\": \"Readium2-AudioBooks\",\n            },\n            host: url.host,\n            method: \"GET\",\n            path: url.pathname + url.search,\n            port: secure ? 443 : 80,\n            protocol: url.protocol,\n        };\n        debug(JSON.stringify(options));\n        (secure ? https : http).request(options, (res) => {\n            if (!res) {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(`HTTP no response ${u}`);\n                return;\n            }\n\n            debug(res.statusCode);\n            debug(JSON.stringify(res.headers));\n\n            if (res.statusCode && (res.statusCode >= 300 && res.statusCode < 400)) {\n                const loc = res.headers.Location || res.headers.location;\n                if (loc && loc.length) {\n                    const l = Array.isArray(loc) ? loc[0] : loc;\n                    process.nextTick(async () => {\n                        try {\n                            const redirectRes = await doRequest(l);\n                            resolve(redirectRes);\n                        } catch (err) {\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(`HTTP audiobook redirect, then fail ${u} ${err}`);\n                        }\n                    });\n                } else {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(`HTTP audiobook redirect without location?! ${u}`);\n                }\n                return;\n            }\n            const type = res.headers[\"Content-Type\"] || res.headers[\"content-type\"];\n            if (type) {\n                if (type.includes(\"application/audiobook+json\")) {\n                    resolve(AudioBookis.RemoteExploded);\n                    return;\n                }\n                if (type.includes(\"application/json\")) {\n                    res.setEncoding(\"utf8\");\n\n                    let responseBody = \"\";\n                    res.on(\"data\", (chunk) => {\n                        responseBody += chunk;\n                    });\n                    res.on(\"end\", () => {\n                        try {\n                            const manJson = JSON.parse(responseBody);\n                            if (manJson.metadata && manJson.metadata[\"@type\"] &&\n                                /https?:\\/\\/schema\\.org\\/Audiobook$/.test(manJson.metadata[\"@type\"])\n                                ) {\n                                resolve(AudioBookis.RemoteExploded);\n                                return;\n                            } else {\n                                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                reject(`HTTP JSON not audiobook ${u}`);\n                            }\n                        } catch (ex) {\n                            debug(ex);\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(`HTTP audiobook invalid JSON?! ${u} ${ex}`);\n                        }\n                    });\n\n                    return;\n                }\n            }\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            reject(`Not HTTP audiobook type ${u}`);\n        }).on(\"error\", (err) => {\n            debug(err);\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            reject(`HTTP error ${u} ${err}`);\n        }).end();\n    });\n}\n\nexport async function isAudioBookPublication(urlOrPath: string): Promise<AudioBookis> {\n    let p = urlOrPath;\n    const isHttp = isHTTP(urlOrPath);\n    if (isHttp) {\n        const url = new URL(urlOrPath);\n        p = url.pathname;\n    }\n\n    const fileName = path.basename(p);\n    const ext = path.extname(fileName);\n\n    const audio = /\\.audiobook$/i.test(ext);\n    const audioLcp = /\\.lcpa$/i.test(ext);\n    const audioLcpAlt = /\\.lcpaudiobook$/i.test(ext);\n    if (audio || audioLcp || audioLcpAlt) {\n        // return isHttp ? AudioBookis.RemotePacked : AudioBookis.LocalPacked;\n        if (!isHttp) {\n            return AudioBookis.LocalPacked;\n        }\n    }\n\n    if (!isHttp && fileName === \"manifest.json\") {\n        // const manPath = fileName === \"manifest.json\" ? p : path.join(p, \"manifest.json\");\n        if (fs.existsSync(p)) {\n            const manStr = fs.readFileSync(p, { encoding: \"utf8\" });\n            const manJson = JSON.parse(manStr);\n            if (manJson.metadata && manJson.metadata[\"@type\"] &&\n                /https?:\\/\\/schema\\.org\\/Audiobook$/.test(manJson.metadata[\"@type\"])\n            ) {\n                return AudioBookis.LocalExploded;\n            }\n        }\n    }\n\n    // // filePath.replace(/\\//, \"/\").endsWith(\"audiobook/manifest.json\")\n    // if (/audiobook[\\/|\\\\]manifest.json$/.test(p)) {\n    //     return isHttp ? AudioBookis.RemoteExploded : AudioBookis.LocalExploded;\n    // }\n\n    if (isHttp) {\n        return doRequest(urlOrPath);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    return Promise.reject(\"Cannot determine audiobook type\");\n}\n"]}