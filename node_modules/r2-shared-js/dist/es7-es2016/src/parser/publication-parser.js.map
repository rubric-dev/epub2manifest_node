{"version":3,"file":"publication-parser.js","sourceRoot":"","sources":["../../../../src/parser/publication-parser.ts"],"names":[],"mappings":";;AAiBA,0DAgBC;;AA1BD,6BAA6B;AAG7B,iDAA+F;AAC/F,qCAAgE;AAChE,yCAAsE;AACtE,uCAAgE;AAEhE,qCAA6E;AAE7E,SAAsB,uBAAuB,CAAC,QAAgB;;QAC1D,IAAI,OAAgC,CAAC;QACrC,IAAI,QAA8B,CAAC;QACnC,OAAO,IAAA,qBAAc,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAA,uBAAgB,EAAC,QAAQ,CAAC,CAAC,CAAC;YAC1D,CAAC,IAAA,sBAAgB,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAA,qBAAe,EAAC,QAAQ,CAAC,CAAC,CAAC;gBAErD,CAAC,CAAC,QAAQ,GAAG,MAAM,IAAA,4BAAmB,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,2BAAkB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;oBAExF,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,2BAAkB,EAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAQ,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC;wBAEhL,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,2BAAkB,EAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,iBAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAQ,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;4BAC5K,CAAC,CAAA,MAAM,IAAA,0BAAkB,EAAC,QAAQ,CAAC,EAAC,CAAC,CAAC,IAAA,yBAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC;gCAE/D,CAAC,OAAO,GAAG,MAAM,IAAA,kCAAsB,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,iCAAqB,EAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;oCAE3F,OAAO,CAAC,MAAM,CAAC,iCAAiC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjG,CAAC;CAAA","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as path from \"path\";\n\nimport { Publication } from \"@models/publication\";\nimport { AudioBookParsePromise, AudioBookis, isAudioBookPublication } from \"@parser/audiobook\";\nimport { CbzParsePromise, isCBZPublication } from \"@parser/cbz\";\nimport { DaisyParsePromise, isDaisyPublication } from \"@parser/daisy\";\nimport { EpubParsePromise, isEPUBlication } from \"@parser/epub\";\n\nimport { DivinaParsePromise, Divinais, isDivinaPublication } from \"./divina\";\n\nexport async function PublicationParsePromise(filePath: string): Promise<Publication> {\n    let isAudio: AudioBookis | undefined;\n    let isDivina: Divinais | undefined;\n    return isEPUBlication(filePath) ? EpubParsePromise(filePath) :\n        (isCBZPublication(filePath) ? CbzParsePromise(filePath) :\n            // tslint:disable-next-line: no-conditional-assignment\n            ((isDivina = await isDivinaPublication(filePath)) ? DivinaParsePromise(filePath, isDivina) :\n                // tslint:disable-next-line:max-line-length\n                (/\\.webpub$/i.test(path.extname(path.basename(filePath))) ? DivinaParsePromise(filePath, (/^https?:\\/\\//.test(filePath) ? Divinais.RemotePacked : Divinais.LocalPacked), \"webpub\") :\n                    // tslint:disable-next-line:max-line-length\n                    (/\\.lcpdf$/i.test(path.extname(path.basename(filePath))) ? DivinaParsePromise(filePath, (/^https?:\\/\\//.test(filePath) ? Divinais.RemotePacked : Divinais.LocalPacked), \"pdf\") :\n                        (await isDaisyPublication(filePath) ? DaisyParsePromise(filePath) :\n                            // tslint:disable-next-line: no-conditional-assignment max-line-length\n                            (isAudio = await isAudioBookPublication(filePath)) ? AudioBookParsePromise(filePath, isAudio) :\n                                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                Promise.reject(`Unrecognized publication type ${filePath}`))))));\n}\n"]}