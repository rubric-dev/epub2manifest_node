{"version":3,"file":"transformer.js","sourceRoot":"","sources":["../../../../src/transform/transformer.ts"],"names":[],"mappings":";;;;AAWA,uDAAmD;AACnD,mEAA8D;AAC9D,iEAA4D;AA0B5D,MAAa,YAAY;IAEd,MAAM,CAAC,QAAQ;QAClB,OAAO,YAAY,CAAC,SAAS,CAAC;IAClC,CAAC;IAMM,MAAM,CAAO,SAAS,CACzB,WAAwB,EACxB,IAAU,EACV,GAAuB,EACvB,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB,EAChD,WAA+B;;YAG/B,OAAO,YAAY,CAAC,QAAQ,EAAE,CAAC,UAAU,CACrC,WAAW,EAAE,IAAI,EAAE,GAAG,EACtB,MAAM,EACN,yBAAyB,EACzB,gBAAgB,EAChB,cAAc,EACd,WAAW,CACd,CAAC;QACN,CAAC;KAAA;IAMD;QACI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAEM,GAAG,CAAC,WAAyB;QAChC,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;YAC7C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;IACL,CAAC;IAqBa,UAAU,CACpB,WAAwB,EAAE,IAAU,EACpC,GAAuB,EACvB,MAAwB,EACxB,yBAAkC,EAClC,gBAAwB,EAAE,cAAsB,EAChD,WAA+B;;YAG/B,IAAI,eAAsD,CAAC;YAC3D,IAAI,UAAU,GAAG,KAAK,CAAC;YA0BvB,IAAI,CAAC,GAAG,MAAM,CAAC;YACf,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBAChC,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,CAAC,EAAE,CAAC;oBAChC,UAAU,GAAG,IAAI,CAAC;oBAClB,IAAI,eAAe,EAAE,CAAC;wBAClB,IAAI,CAAC;4BACD,CAAC,GAAG,MAAM,eAAe,CAAC;wBAC9B,CAAC;wBAAC,OAAO,IAAI,EAAE,CAAC;4BACZ,eAAe,GAAG,SAAS,CAAC;4BAC5B,MAAM;wBACV,CAAC;oBACL,CAAC;oBACD,eAAe,GAAG,CAAC,CAAC,eAAe,CAC/B,WAAW,EACX,IAAI,EACJ,GAAG,EACH,CAAC,EACD,yBAAyB,EACzB,gBAAgB,EAChB,cAAc,EACd,WAAW,CACd,CAAC;gBACN,CAAC;YACL,CAAC;YACD,IAAI,eAAe,EAAE,CAAC;gBAClB,OAAO,eAAe,CAAC;YAC3B,CAAC;YAID,OAAO,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACtF,CAAC;KAAA;;AAlIL,oCAmIC;AArGkB,sBAAS,GAAiB,IAAI,YAAY,EAAE,CAAC;AAuGhE,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,2CAAmB,EAAE,CAAC,CAAC;AACvD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,yCAAkB,EAAE,CAAC,CAAC;AACtD,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,gCAAc,EAAE,CAAC,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Publication } from \"@models/publication\";\nimport { Link } from \"@models/publication-link\";\nimport { IStreamAndLength } from \"@r2-utils-js/_utils/zip/zip\";\n\nimport { TransformerLCP } from \"./transformer-lcp\";\nimport { TransformerObfAdobe } from \"./transformer-obf-adobe\";\nimport { TransformerObfIDPF } from \"./transformer-obf-idpf\";\n\n// import { TransformerHTML } from \"./transformer-html\";\n\nexport interface ITransformer {\n    supports(publication: Publication, link: Link): boolean;\n\n    transformStream(\n        publication: Publication,\n        link: Link,\n        url: string | undefined,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number,\n        partialByteEnd: number,\n        sessionInfo: string | undefined,\n    ): Promise<IStreamAndLength>;\n\n    // getDecryptedSizeStream(\n    //     publication: Publication, link: Link,\n    //     stream: IStreamAndLength): Promise<number>;\n\n    // transformBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer>;\n    // getDecryptedSizeBuffer(publication: Publication, link: Link, data: Buffer): Promise<number>;\n}\n\nexport class Transformers {\n\n    public static instance(): Transformers {\n        return Transformers._instance;\n    }\n\n    // public static async tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\n    //     return Transformers.instance()._tryBuffer(publication, link, data);\n    // }\n\n    public static async tryStream(\n        publication: Publication,\n        link: Link,\n        url: string | undefined,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number, partialByteEnd: number,\n        sessionInfo: string | undefined,\n        ): Promise<IStreamAndLength> {\n\n        return Transformers.instance()._tryStream(\n            publication, link, url,\n            stream,\n            isPartialByteRangeRequest,\n            partialByteBegin,\n            partialByteEnd,\n            sessionInfo,\n        );\n    }\n\n    private static _instance: Transformers = new Transformers();\n\n    private transformers: ITransformer[];\n\n    constructor() {\n        this.transformers = [];\n    }\n\n    public add(transformer: ITransformer) {\n        if (this.transformers.indexOf(transformer) < 0) {\n            this.transformers.push(transformer);\n        }\n    }\n\n    // private async _tryBuffer(publication: Publication, link: Link, data: Buffer): Promise<Buffer> {\n    //     let transformedData: Promise<Buffer> | undefined;\n    //     const transformer = this.transformers.find((t) => {\n    //         if (!t.supports(publication, link)) {\n    //             return false;\n    //         }\n    //         transformedData = t.transformBuffer(publication, link, data);\n    //         if (transformedData) {\n    //             return true;\n    //         }\n    //         return false;\n    //     });\n    //     if (transformer && transformedData) {\n    //         return transformedData;\n    //     }\n    //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n    //     return Promise.reject(\"transformers fail (buffer)\");\n    // }\n\n    private async _tryStream(\n        publication: Publication, link: Link,\n        url: string | undefined,\n        stream: IStreamAndLength,\n        isPartialByteRangeRequest: boolean,\n        partialByteBegin: number, partialByteEnd: number,\n        sessionInfo: string | undefined,\n        ): Promise<IStreamAndLength> {\n\n        let transformedData: Promise<IStreamAndLength> | undefined;\n        let atLeastOne = false;\n\n        // Return the first one that succeeds\n        // ----\n        // const transformer = this.transformers.find((t) => {\n        //     if (!t.supports(publication, link)) {\n        //         return false;\n        //     } else {\n        //         atLeastOne = true;\n        //     }\n        //     transformedData = t.transformStream(\n        //         publication, link, url,\n        //         stream,\n        //         isPartialByteRangeRequest, partialByteBegin, partialByteEnd);\n        //     if (transformedData) {\n        //         return true;\n        //     }\n        //     return false;\n        // });\n        // if (transformer && transformedData) {\n        //     return transformedData;\n        // }\n        // ----\n\n        // Chain transformers\n        // ----\n        let s = stream;\n        for (const t of this.transformers) {\n            if (t.supports(publication, link)) {\n                atLeastOne = true;\n                if (transformedData) { // need to consume the promise\n                    try {\n                        s = await transformedData;\n                    } catch (_err) {\n                        transformedData = undefined;\n                        break;\n                    }\n                }\n                transformedData = t.transformStream(\n                    publication,\n                    link,\n                    url,\n                    s,\n                    isPartialByteRangeRequest,\n                    partialByteBegin,\n                    partialByteEnd,\n                    sessionInfo,\n                );\n            }\n        }\n        if (transformedData) {\n            return transformedData;\n        }\n        // ----\n\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return atLeastOne ? Promise.reject(\"transformers fail\") : Promise.resolve(stream);\n    }\n}\n\nTransformers.instance().add(new TransformerObfAdobe());\nTransformers.instance().add(new TransformerObfIDPF());\nTransformers.instance().add(new TransformerLCP());\n\n// Transformers.instance().add(new TransformerHTML()); // order matters! (decrypt first)\n"]}