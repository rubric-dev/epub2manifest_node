{"version":3,"file":"server-manifestjson.js","sourceRoot":"","sources":["../../../../src/http/server-manifestjson.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as crypto from \"crypto\";\nimport * as css2json from \"css2json\";\nimport * as debug_ from \"debug\";\nimport * as DotProp from \"dot-prop\";\nimport * as express from \"express\";\nimport * as jsonMarkup from \"json-markup\";\nimport * as path from \"path\";\n\nimport { TaJsonSerialize } from \"@r2-lcp-js/serializable\";\nimport { Publication } from \"@r2-shared-js/models/publication\";\nimport { Link } from \"@r2-shared-js/models/publication-link\";\nimport {\n    getAllMediaOverlays, mediaOverlayURLParam, mediaOverlayURLPath,\n} from \"@r2-shared-js/parser/epub\";\nimport { encodeURIComponent_RFC3986, isHTTP } from \"@r2-utils-js/_utils/http/UrlUtils\";\nimport { sortObject, traverseJsonObjects } from \"@r2-utils-js/_utils/JsonUtils\";\n\nimport { jsonSchemaValidate } from \"../utils/json-schema-validate\";\nimport {\n    IRequestPayloadExtension, IRequestQueryParams, _jsonPath, _pathBase64, _show,\n} from \"./request-ext\";\nimport { Server } from \"./server\";\n\nconst debug = debug_(\"r2:streamer#http/server-manifestjson\");\n\nexport function serverManifestJson(server: Server, routerPathBase64: express.Router) {\n\n    // https://github.com/mafintosh/json-markup/blob/master/style.css\n    const jsonStyle = `\n.json-markup {\n    line-height: 17px;\n    font-size: 13px;\n    font-family: monospace;\n    white-space: pre;\n}\n.json-markup-key {\n    font-weight: bold;\n}\n.json-markup-bool {\n    color: firebrick;\n}\n.json-markup-string {\n    color: green;\n}\n.json-markup-null {\n    color: gray;\n}\n.json-markup-number {\n    color: blue;\n}\n`;\n\n    const routerManifestJson = express.Router({ strict: false });\n    // routerManifestJson.use(morgan(\"combined\", { stream: { write: (msg: any) => debug(msg) } }));\n\n    routerManifestJson.get([\"/\", \"/\" + _show + \"/:\" + _jsonPath + \"?\"],\n        async (req: express.Request, res: express.Response) => {\n\n            const reqparams = (req as IRequestPayloadExtension).params;\n\n            if (!reqparams.pathBase64) {\n                reqparams.pathBase64 = (req as IRequestPayloadExtension).pathBase64;\n            }\n            if (!reqparams.lcpPass64) {\n                reqparams.lcpPass64 = (req as IRequestPayloadExtension).lcpPass64;\n            }\n\n            const isShow = req.url.indexOf(\"/show\") >= 0 || (req.query as IRequestQueryParams).show;\n            if (!reqparams.jsonPath && (req.query as IRequestQueryParams).show) {\n                reqparams.jsonPath = (req.query as IRequestQueryParams).show;\n            }\n\n            // debug(req.method);\n            const isHead = req.method.toLowerCase() === \"head\";\n            if (isHead) {\n                debug(\"HEAD !!!!!!!!!!!!!!!!!!!\");\n            }\n\n            const isCanonical = (req.query as IRequestQueryParams).canonical &&\n                (req.query as IRequestQueryParams).canonical === \"true\";\n\n            const isSecureHttp = req.secure ||\n                req.protocol === \"https\" ||\n                req.get(\"X-Forwarded-Proto\") === \"https\"\n                ;\n\n            // reqparams.pathBase64 is already decoded!\n            // const decoded = decodeURIComponent(reqparams.pathBase64);\n            const pathBase64Str = Buffer.from(reqparams.pathBase64, \"base64\").toString(\"utf8\");\n\n            // const fileName = path.basename(pathBase64Str);\n            // const ext = path.extname(fileName).toLowerCase();\n\n            let publication: Publication;\n            try {\n                publication = await server.loadOrGetCachedPublication(pathBase64Str);\n            } catch (err) {\n                debug(err);\n                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                    + err + \"</p></body></html>\");\n                return;\n            }\n\n            // dumpPublication(publication);\n\n            if (reqparams.lcpPass64 && !server.disableDecryption) {\n                // reqparams.lcpPass64 is already decoded!\n                // const decoded = decodeURIComponent(reqparams.lcpPass64);\n                const lcpPass = Buffer.from(reqparams.lcpPass64, \"base64\").toString(\"utf8\");\n                if (publication.LCP) {\n                    try {\n                        await publication.LCP.tryUserKeys([lcpPass]); // hex\n                    } catch (err) {\n                        // a bit brutal, but that's just for testing anyway (not real-world usage pattern)\n                        publication.LCP.ContentKey = undefined;\n                        debug(err);\n                        const errMsg = \"FAIL publication.LCP.tryUserKeys(): \" + err;\n                        debug(errMsg);\n                        res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                            + errMsg + \"</p></body></html>\");\n                        return;\n                    }\n                }\n            }\n\n            // debug(req.url); // path local to this router\n            // debug(req.baseUrl); // path local to above this router\n            // debug(req.originalUrl); // full path (req.baseUrl + req.url)\n            // url.parse(req.originalUrl, false).host\n            // req.headers.host has port, not req.hostname\n\n            const rootUrl = (isSecureHttp ? \"https://\" : \"http://\")\n                + req.headers.host + \"/pub/\"\n                + (reqparams.lcpPass64 ?\n                    (server.lcpBeginToken + encodeURIComponent_RFC3986(reqparams.lcpPass64) + server.lcpEndToken) :\n                    \"\")\n                + encodeURIComponent_RFC3986(reqparams.pathBase64);\n            const manifestURL = rootUrl + \"/\" + \"manifest.json\";\n\n            const contentType =\n                (publication.Metadata && publication.Metadata.RDFType &&\n                /http[s]?:\\/\\/schema\\.org\\/Audiobook$/.test(publication.Metadata.RDFType)) ?\n                \"application/audiobook+json\" : ((publication.Metadata && publication.Metadata.RDFType &&\n                    (/http[s]?:\\/\\/schema\\.org\\/ComicStory$/.test(publication.Metadata.RDFType) ||\n                    /http[s]?:\\/\\/schema\\.org\\/VisualNarrative$/.test(publication.Metadata.RDFType))) ? \"application/divina+json\" :\n                        \"application/webpub+json\");\n\n            const selfLink = publication.searchLinkByRel(\"self\");\n            if (!selfLink) {\n                publication.AddLink(contentType, [\"self\"], manifestURL, undefined);\n            }\n\n            // // test JSON Schema string format \"uri-template\" vs. \"uri-reference\"\n            // publication.AddLink(\"txt\", [\"test1\"], \"./relative/%20URL?param=val#hash\", false);\n            // publication.AddLink(\"txt\", [\"test2\"], \"./relative/%20URL?param=val#hash\", true);\n            // publication.AddLink(\"txt\", [\"test3\"], \"./relative/%20URL?param=val#hash\", undefined);\n\n            // publication.AddLink(\"txt\", [\"test4\"], \"./relative/%20URL{var}/?param=val#hash\", false);\n            // publication.AddLink(\"txt\", [\"test5\"], \"./relative/%20URL{var}/?param=val#hash\", true);\n            // publication.AddLink(\"txt\", [\"test6\"], \"./relative/%20URL{var}/?param=val#hash\", undefined);\n\n            // publication.AddLink(\"txt\", [\"test7\"], \"http://absolute.com/%20URL?param=val#hash\", false);\n            // publication.AddLink(\"txt\", [\"test8\"], \"http://absolute.com/%20URL?param=val#hash\", true);\n            // publication.AddLink(\"txt\", [\"test9\"], \"http://absolute.com/%20URL?param=val#hash\", undefined);\n\n            // publication.AddLink(\"txt\", [\"test10\"], \"http://absolute.com/%20URL{var}/?param=val#hash\", false);\n            // publication.AddLink(\"txt\", [\"test11\"], \"http://absolute.com/%20URL{var}/?param=val#hash\", true);\n            // publication.AddLink(\"txt\", [\"test12\"], \"http://absolute.com/%20URL{var}/?param=val#hash\", undefined);\n\n            function absoluteURL(href: string): string {\n                return rootUrl + \"/\" + href;\n            }\n\n            function absolutizeURLs(jsonObj: any) {\n                traverseJsonObjects(jsonObj,\n                    (obj) => {\n                        if (obj.href && typeof obj.href === \"string\"\n                            && !isHTTP(obj.href)) {\n                            // obj.href_ = obj.href;\n                            obj.href = absoluteURL(obj.href);\n                        }\n\n                        if (obj[\"media-overlay\"] && typeof obj[\"media-overlay\"] === \"string\"\n                            && !isHTTP(obj[\"media-overlay\"])) {\n                            // obj[\"media-overlay_\"] = obj[\"media-overlay\"];\n                            obj[\"media-overlay\"] = absoluteURL(obj[\"media-overlay\"]);\n                        }\n                    });\n            }\n\n            let hasMO = false;\n            if (publication.Spine) {\n                const link = publication.Spine.find((l) => {\n                    if (l.Properties && l.Properties.MediaOverlay) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (link) {\n                    hasMO = true;\n                }\n            }\n            if (hasMO) {\n                const moLink = publication.searchLinkByRel(\"media-overlay\");\n                if (!moLink) {\n                    const moURL = // rootUrl + \"/\" +\n                        mediaOverlayURLPath +\n                        \"?\" + mediaOverlayURLParam + \"={path}\";\n                    publication.AddLink(\"application/vnd.syncnarr+json\", [\"media-overlay\"], moURL, true);\n                }\n            }\n\n            let coverImage: string | undefined;\n            const coverLink = publication.GetCover();\n            if (coverLink) {\n                coverImage = coverLink.Href;\n                if (coverImage && !isHTTP(coverImage)) {\n                    coverImage = absoluteURL(coverImage);\n                }\n            }\n\n            if (isShow) {\n                let objToSerialize: any = null;\n\n                if (reqparams.jsonPath) {\n                    switch (reqparams.jsonPath) {\n\n                        case \"all\": {\n                            objToSerialize = publication;\n                            break;\n                        }\n                        case \"cover\": {\n                            objToSerialize = publication.GetCover();\n                            break;\n                        }\n                        case \"mediaoverlays\": {\n                            try {\n                                objToSerialize = await getAllMediaOverlays(publication);\n                            } catch (err) {\n                                debug(err);\n                                res.status(500).send(\"<html><body><p>Internal Server Error</p><p>\"\n                                    + err + \"</p></body></html>\");\n                                return;\n                            }\n                            break;\n                        }\n                        case \"spine\": {\n                            objToSerialize = publication.Spine;\n                            break;\n                        }\n                        case \"pagelist\": {\n                            objToSerialize = publication.PageList;\n                            break;\n                        }\n                        case \"landmarks\": {\n                            objToSerialize = publication.Landmarks;\n                            break;\n                        }\n                        case \"links\": {\n                            objToSerialize = publication.Links;\n                            break;\n                        }\n                        case \"resources\": {\n                            objToSerialize = publication.Resources;\n                            break;\n                        }\n                        case \"toc\": {\n                            objToSerialize = publication.TOC;\n                            break;\n                        }\n                        case \"metadata\": {\n                            objToSerialize = publication.Metadata;\n                            break;\n                        }\n                        default: {\n                            objToSerialize = null;\n                        }\n                    }\n                } else {\n                    objToSerialize = publication;\n                }\n\n                if (!objToSerialize) {\n                    objToSerialize = {};\n                }\n\n                const jsonObj = TaJsonSerialize(objToSerialize);\n\n                let validationStr: string | undefined;\n                const doValidate = !reqparams.jsonPath || reqparams.jsonPath === \"all\";\n                if (doValidate) {\n\n                    const jsonSchemasRootpath = path.join(process.cwd(), \"misc\", \"json-schema\");\n                    const jsonSchemasNames = [\n                        \"webpub-manifest/publication\", // must be first!\n                        \"webpub-manifest/contributor-object\",\n                        \"webpub-manifest/contributor\",\n                        \"webpub-manifest/link\",\n                        \"webpub-manifest/metadata\",\n                        \"webpub-manifest/subcollection\",\n                        \"webpub-manifest/properties\",\n                        \"webpub-manifest/subject\",\n                        \"webpub-manifest/subject-object\",\n                        \"webpub-manifest/extensions/epub/metadata\",\n                        \"webpub-manifest/extensions/epub/subcollections\",\n                        \"webpub-manifest/extensions/epub/properties\",\n                        \"webpub-manifest/extensions/presentation/metadata\",\n                        \"webpub-manifest/extensions/presentation/properties\",\n                        \"webpub-manifest/language-map\",\n                        // \"opds/feed\",\n                        // \"opds/publication\",\n                        \"opds/acquisition-object\",\n                        \"opds/catalog-entry\",\n                        // \"opds/feed-metadata\",\n                        \"opds/properties\",\n                        // \"opds/authentication\",\n                        // \"lcp/lcpdf\",\n                        // \"lcp/license\",\n                        // \"lcp/link\",\n                        // \"lcp/status\",\n                    ];\n\n                    const validationErrors =\n                        jsonSchemaValidate(jsonSchemasRootpath, jsonSchemasNames, jsonObj);\n                    if (validationErrors) {\n                        validationStr = \"\";\n\n                        for (const err of validationErrors) {\n\n                            debug(\"JSON Schema validation FAIL.\");\n                            debug(err);\n\n                            const val = err.jsonPath ? DotProp.get(jsonObj, err.jsonPath) : \"\";\n                            const valueStr = (typeof val === \"string\") ?\n                                `${val}` :\n                                ((val instanceof Array || typeof val === \"object\") ?\n                                `${JSON.stringify(val)}` :\n                                    \"\");\n                            debug(valueStr);\n\n                            const title = DotProp.get(jsonObj, \"metadata.title\");\n                            debug(title);\n\n                            validationStr +=\n                            // tslint:disable-next-line:max-line-length\n                            `\\n\"${title}\"\\n\\n${err.ajvMessage}: ${valueStr}\\n\\n'${err.ajvDataPath?.replace(/^\\./, \"\")}' (${err.ajvSchemaPath})\\n\\n`;\n                        }\n                    }\n                }\n\n                absolutizeURLs(jsonObj);\n\n                // const jsonStr = global.JSON.stringify(jsonObj, null, \"    \");\n\n                // // breakLength: 100  maxArrayLength: undefined\n                // const dumpStr = util.inspect(objToSerialize,\n                //     { showHidden: false, depth: 1000, colors: false, customInspect: true });\n\n                let jsonPretty = jsonMarkup(jsonObj, css2json(jsonStyle));\n\n                const regex = new RegExp(\">\" + rootUrl + \"/([^<]+</a>)\", \"g\");\n                jsonPretty = jsonPretty.replace(regex, \">$1\");\n                jsonPretty = jsonPretty.replace(/>manifest.json<\\/a>/, \">\" + rootUrl + \"/manifest.json</a>\");\n\n                res.status(200).send(\"<html>\" +\n                    \"<head><script type=\\\"application/ld+json\\\" href=\\\"\" +\n                    manifestURL +\n                    \"\\\"></script></head>\" +\n                    \"<body>\" +\n                    \"<h1>\" + path.basename(pathBase64Str) + \"</h1>\" +\n                    // tslint:disable-next-line:max-line-length\n                    (coverImage ? \"<a href=\\\"\" + coverImage + \"\\\"><div style=\\\"width: 400px;\\\"><img src=\\\"\" + coverImage + \"\\\" alt=\\\"\\\" style=\\\"display: block; width: 100%; height: auto;\\\"/></div></a>\" : \"\") +\n                    \"<hr><p><pre>\" + jsonPretty + \"</pre></p>\" +\n                    // tslint:disable-next-line:max-line-length\n                    (doValidate ? (validationStr ? (\"<hr><p><pre>\" + validationStr + \"</pre></p>\") : (\"<hr><p>JSON SCHEMA OK.</p>\")) : \"\") +\n                    // \"<hr><p><pre>\" + jsonStr + \"</pre></p>\" +\n                    // \"<p><pre>\" + dumpStr + \"</pre></p>\" +\n                    \"</body></html>\");\n            } else {\n                server.setResponseCORS(res);\n                res.set(\"Content-Type\", `${contentType}; charset=utf-8`);\n\n                const publicationJsonObj = TaJsonSerialize(publication);\n\n                // absolutizeURLs(publicationJsonObj);\n\n                if (isCanonical) {\n                    if (publicationJsonObj.links) {\n                        delete publicationJsonObj.links;\n                    }\n                }\n\n                const publicationJsonStr = isCanonical ?\n                    global.JSON.stringify(sortObject(publicationJsonObj), null, \"\") :\n                    global.JSON.stringify(publicationJsonObj, null, \"  \");\n\n                const checkSum = crypto.createHash(\"sha256\");\n                checkSum.update(publicationJsonStr);\n                const hash = checkSum.digest(\"hex\");\n\n                const match = req.header(\"If-None-Match\");\n                if (match === hash) {\n                    debug(\"manifest.json cache\");\n                    res.status(304); // StatusNotModified\n                    res.end();\n                    return;\n                }\n\n                res.setHeader(\"ETag\", hash);\n                // server.setResponseCacheHeaders(res, true);\n\n                const links = getPreFetchResources(publication);\n                if (links && links.length) {\n                    let n = 0;\n                    let prefetch = \"\";\n                    for (const l of links) {\n                        n++;\n                        if (n > server.maxPrefetchLinks) {\n                            break;\n                        }\n                        const href = absoluteURL(l.Href);\n                        prefetch += \"<\" + href + \">;\" + \"rel=prefetch,\";\n                    }\n                    res.setHeader(\"Link\", prefetch);\n                }\n\n                res.status(200);\n\n                if (isHead) {\n                    res.end();\n                } else {\n                    res.send(publicationJsonStr);\n                }\n            }\n        });\n\n    routerPathBase64.use(\"/:\" + _pathBase64 + \"/manifest.json\", routerManifestJson);\n}\n\nfunction getPreFetchResources(publication: Publication): Link[] {\n    const links: Link[] = [];\n\n    if (publication.Resources) {\n        // https://w3c.github.io/publ-epub-revision/epub32/spec/epub-spec.html#cmt-grp-font\n        const mediaTypes = [\"text/css\",\n            \"text/javascript\", \"application/javascript\",\n            \"application/vnd.ms-opentype\", \"font/otf\", \"application/font-sfnt\",\n            \"font/ttf\", \"application/font-sfnt\",\n            \"font/woff\", \"application/font-woff\", \"font/woff2\"];\n        for (const mediaType of mediaTypes) {\n            for (const link of publication.Resources) {\n                if (link.TypeLink === mediaType) {\n                    links.push(link);\n                }\n            }\n        }\n    }\n\n    return links;\n}\n"]}