{"version":3,"file":"CounterPassThroughStream.js","sourceRoot":"","sources":["../../../../../src/_utils/stream/CounterPassThroughStream.ts"],"names":[],"mappings":";;;;AAOA,iCAAmC;AAInC;IAA8C,oDAAS;IAInD,kCAAY,EAAU;QAClB,YAAA,MAAK,WAAE,SAAC;QACR,KAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,KAAI,CAAC,aAAa,GAAG,CAAC,CAAC;;IAC3B,CAAC;IAEM,6CAAU,GAAjB,UAAkB,KAAa,EAAE,SAAiB,EAAE,QAAoB;QACpE,IAAI,CAAC,aAAa,IAAI,KAAK,CAAC,MAAM,CAAC;QAEnC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEtB,QAAQ,EAAE,CAAC;IACf,CAAC;IACL,+BAAC;AAAD,CAAC,AAnBD,CAA8C,kBAAS,GAmBtD;AAnBY,4DAAwB","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Transform } from \"stream\";\n\n// const debug = debug_(\"r2:utils#stream/CounterPassThroughStream\");\n\nexport class CounterPassThroughStream extends Transform {\n    public bytesReceived: number;\n    public readonly id: number;\n\n    constructor(id: number) {\n        super();\n        this.id = id;\n        this.bytesReceived = 0;\n    }\n\n    public _transform(chunk: Buffer, _encoding: string, callback: () => void): void {\n        this.bytesReceived += chunk.length;\n\n        this.push(chunk);\n\n        this.emit(\"progress\");\n\n        callback();\n    }\n}\n"]}