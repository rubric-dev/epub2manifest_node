{"version":3,"file":"number-converter.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/converters/number-converter.ts"],"names":[],"mappings":";;;AASA;IAAA;IAcA,CAAC;IAbU,mCAAS,GAAhB,UAAiB,QAAyB;QAEtC,OAAO,CAAC,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3E,CAAC;IAEM,qCAAW,GAAlB,UAAmB,KAAa;QAE5B,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;IAKL,sBAAC;AAAD,CAAC,AAdD,IAcC;AAdY,0CAAe","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { IPropertyConverter } from \"./converter\";\n\nexport class NumberConverter implements IPropertyConverter {\n    public serialize(property: number | string): string {\n        // parseFloat() vs. Number()\n        return (typeof property === \"string\") ? property : property.toString();\n    }\n\n    public deserialize(value: string): number {\n        // return (typeof value === \"string\") ? Number(value) : value;\n        return Number(value);\n    }\n\n    // public collapseArrayWithSingleItem(): boolean {\n    //     return false;\n    // }\n}\n"]}