{"version":3,"file":"zip1.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip1.ts"],"names":[],"mappings":";;;;AAOA,8BAAgC;AAEhC,2CAA8C;AAE9C,6BAAoD;AAIpD,IAAM,KAAK,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAE1C;IAA0B,gCAAG;IA8CzB,cAA6B,QAAgB,EAAW,GAAQ;QAC5D,YAAA,MAAK,WAAE,SAAC;QADiB,cAAQ,GAAR,QAAQ,CAAQ;QAAW,SAAG,GAAH,GAAG,CAAK;;IAEhE,CAAC;IA9CmB,gBAAW,GAA/B,UAAgC,QAAgB;;;gBAE5C,WAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;wBAErC,IAAM,GAAG,GAAG,IAAI,SAAS,CAAC;4BACtB,IAAI,EAAE,QAAQ;4BACd,YAAY,EAAE,IAAI;yBACrB,CAAC,CAAC;wBAGH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,GAAQ;4BACrB,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,CAAC;4BAClC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAGX,MAAM,CAAC,GAAG,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;wBAGH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,MAAW;wBAG5B,CAAC,CAAC,CAAC;wBAGH,GAAG,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,KAAU,EAAE,IAAS;4BACpC,KAAK,CAAC,gBAAgB,CAAC,CAAC;4BACxB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BAClB,KAAK,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC;wBAEH,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE;4BAOZ,OAAO,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;wBACrC,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACN;IAOM,0BAAW,GAAlB;QACI,KAAK,CAAC,uBAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACL,CAAC;IAEM,2BAAY,GAAnB;QACI,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC;IACjC,CAAC;IAEM,yBAAU,GAAjB;QACI,OAAO,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACnC,CAAC;IAEM,uBAAQ,GAAf,UAAgB,SAAiB;QAC7B,OAAO,IAAI,CAAC,UAAU,EAAE;eACjB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAEY,yBAAU,GAAvB;;;gBAEI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;oBACrB,WAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;gBAC/B,CAAC;gBACD,WAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAC;;;KAC3D;IAEY,iCAAkB,GAA/B,UAAgC,SAAiB;;;;gBAI7C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;oBAElD,WAAO,OAAO,CAAC,MAAM,CAAC,uBAAuB,GAAG,SAAS,CAAC,EAAC;gBAC/D,CAAC;gBAWD,WAAO,IAAI,OAAO,CAAmB,UAAC,OAAO,EAAE,MAAM;wBAGjD,KAAI,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,UAAC,GAAQ,EAAE,MAA6B;4BAC/D,IAAI,GAAG,EAAE,CAAC;gCAEN,MAAM,CAAC,GAAG,CAAC,CAAC;gCACZ,OAAO;4BACX,CAAC;4BAED,IAAM,KAAK,GAAG,KAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;4BAE5C,IAAM,eAAe,GAAqB;gCACtC,MAAM,EAAE,KAAK,CAAC,IAAI;gCAClB,KAAK,EAAE;;wCACH,WAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAC;;qCAC7C;gCACD,MAAM,QAAA;6BACT,CAAC;4BACF,OAAO,CAAC,eAAe,CAAC,CAAC;wBAC7B,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,EAAC;;;KACN;IACL,WAAC;AAAD,CAAC,AAvHD,CAA0B,SAAG,GAuH5B;AAvHY,oBAAI","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-require-imports\nimport StreamZip = require(\"node-stream-zip\");\n\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\n\n// import { bufferToStream } from \"../stream/BufferUtils\";\n\nconst debug = debug_(\"r2:utils#zip/zip1\");\n\nexport class Zip1 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n\n        return new Promise<IZip>((resolve, reject) => {\n\n            const zip = new StreamZip({\n                file: filePath,\n                storeEntries: true,\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            zip.on(\"error\", (err: any) => {\n                debug(\"--ZIP error: \" + filePath);\n                debug(err);\n\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(err);\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            zip.on(\"entry\", (_entry: any) => {\n                // console.log(\"--ZIP: entry\");\n                // debug(entry.name);\n            });\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            zip.on(\"extract\", (entry: any, file: any) => {\n                debug(\"--ZIP extract:\");\n                debug(entry.name);\n                debug(file);\n            });\n\n            zip.on(\"ready\", () => {\n                // console.log(\"--ZIP: ready\");\n                // console.log(zip.entriesCount);\n\n                // const entries = zip.entries();\n                // console.log(entries);\n\n                resolve(new Zip1(filePath, zip));\n            });\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip1 -- \" + this.filePath);\n        if (this.zip) {\n            this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.entriesCount;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries()\n            && this.zip.entries()[entryPath];\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        if (!this.hasEntries()) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(Object.keys(this.zip.entries()));\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        // return new Promise<IStreamAndLength>((resolve, _reject) => {\n        //     const buffer: Buffer = this.zip.entryDataSync(entryPath);\n        //     const streamAndLength: IStreamAndLength = {\n        //         length: buffer.length,\n        //         stream: bufferToStream(buffer),\n        //     };\n        //     resolve(streamAndLength);\n        // });\n\n        return new Promise<IStreamAndLength>((resolve, reject) => {\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.zip.stream(entryPath, (err: any, stream: NodeJS.ReadableStream) => {\n                if (err) {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(err);\n                    return;\n                }\n\n                const entry = this.zip.entries()[entryPath];\n\n                const streamAndLength: IStreamAndLength = {\n                    length: entry.size,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                resolve(streamAndLength);\n            });\n        });\n    }\n}\n"]}