{"version":3,"file":"xml-xpathselector.js","sourceRoot":"","sources":["../../../../../../src/_utils/xml-js-mapper/decorators/xml-xpathselector.ts"],"names":[],"mappings":";;AAYA,4CA6FC;AAlGD,4BAA0B;AAE1B,oEAA6D;AAG7D,SAAgB,gBAAgB,CAAC,QAAgB,EAAE,UAA2B;IAE1E,OAAO,CAAC,MAAW,EAAE,GAAW,EAAQ,EAAE;QACtC,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAGnE,MAAM,MAAM,GAAG,IAAA,iCAAa,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACzC,QAAQ,CAAC,aAAa,GAAG,QAAQ,CAAC;QAElC,IAAI,UAAU,EAAE,CAAC;YACb,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,CAAC;QA4BD,QAAQ,CAAC,KAAK,GAAG,UAAU,KAAK,KAAK,CAAC;QACtC,QAAQ,CAAC,GAAG,GAAG,UAAU,KAAK,GAAG,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAC3D,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACrC,CAAC;QAGD,IAAI,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACpC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;eACxC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;eACvC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;YAE7C,QAAQ,CAAC,mBAAmB,GAAG,EAAE,CAAC;YAClC,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBACf,SAAS;gBACb,CAAC;gBAED,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAKjC,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;gBACpC,MAAM,MAAM,GAAG,IAAI,KAAK,QAAQ,CAAC;gBACjC,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACnC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;oBACb,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxD,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBACzC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrD,SAAS,CAAC;gBAGd,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC;oBAClC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;oBACxD,SAAS,CAAC;gBAEd,MAAM,KAAK,GAAuB;oBAC9B,WAAW;oBACX,MAAM;oBACN,SAAS;oBACT,eAAe;oBACf,YAAY;iBACf,CAAC;gBAEF,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC;IACL,CAAC,CAAC;AACN,CAAC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport \"reflect-metadata\";\n\nimport { getDefinition } from \"../classes/object-definition\";\nimport { IXPathSelectorItem, IXmlNamespaces } from \"../types\";\n\nexport function XmlXPathSelector(selector: string, namespaces?: IXmlNamespaces) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target: any, key: string): void => {\n        const objectType = Reflect.getMetadata(\"design:type\", target, key);\n\n        // console.log(target.constructor);\n        const objDef = getDefinition(target.constructor);\n        // console.log(objDef);\n        const property = objDef.getProperty(key);\n        property.xpathSelector = selector;\n\n        if (namespaces) {\n            property.namespaces = namespaces;\n        }\n        // TOO EARLY! :( (ObjectDefinition not ready yet)\n        // let atLeastOne = false;\n        // const namespacesAll: IXmlNamespaces = {};\n        // if (objDef.namespaces) {\n        //     console.log(\"***************************************** XmlObject NS\");\n        //     console.log(objDef.namespaces);\n        //     for (const prop in objDef.namespaces) {\n        //         if (objDef.namespaces.hasOwnProperty(prop)) {\n        //             namespacesAll[prop] = objDef.namespaces[prop];\n        //             atLeastOne = true;\n        //         }\n        //     }\n        // }\n        // if (namespaces) {\n        //     console.log(\"***************************************** PROP NS\");\n        //     console.log(namespaces);\n        //     for (const prop in namespaces) {\n        //         if (namespaces.hasOwnProperty(prop)) {\n        //             namespacesAll[prop] = namespaces[prop];\n        //             atLeastOne = true;\n        //         }\n        //     }\n        // }\n        // if (atLeastOne) { // Object.keys(namespacesAll).length)\n        //     property.namespaces = namespacesAll;\n        // }\n\n        property.array = objectType === Array;\n        property.set = objectType === Set;\n        if (!property.array && !property.set && !property.objectType) {\n            property.objectType = objectType;\n        }\n\n        // console.log(\"£££££££££ \" + property.xpathSelector);\n        if (property.xpathSelector.indexOf(\"|\") < 0\n            && property.xpathSelector.indexOf(\">\") < 0\n            && property.xpathSelector.indexOf(\"*\") < 0\n            && property.xpathSelector.indexOf(\"||\") < 0\n            && property.xpathSelector.indexOf(\"[\") < 0\n            && property.xpathSelector.indexOf(\"]\") < 0) {\n\n            property.xpathSelectorParsed = [];\n            const items = property.xpathSelector.split(\"/\");\n            for (const item of items) {\n                if (!item.length) {\n                    continue;\n                }\n                // console.log(item);\n                const subitems = item.split(\":\");\n                // console.log(subitems[0]);\n                // if (subitems.length > 1) {\n                //     console.log(subitems[1]);\n                // }\n                const isAttribute = item[0] === \"@\";\n                const isText = item === \"text()\";\n                const localName = subitems.length > 1 ?\n                    subitems[1] :\n                    (isAttribute ? subitems[0].substr(1) : subitems[0]);\n                const namespacePrefix = subitems.length > 1 ?\n                    (isAttribute ? subitems[0].substr(1) : subitems[0]) :\n                    undefined;\n\n                // likely nil at this stage, populated in XmlObject() using top-level NS URI map\n                const namespaceUri = namespacePrefix ?\n                    (namespaces ? namespaces[namespacePrefix] : undefined) :\n                    undefined;\n\n                const xItem: IXPathSelectorItem = {\n                    isAttribute,\n                    isText,\n                    localName,\n                    namespacePrefix,\n                    namespaceUri,\n                };\n                // console.log(xItem);\n                property.xpathSelectorParsed.push(xItem);\n            }\n        }\n    };\n}\n"]}