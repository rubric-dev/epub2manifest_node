{"version":3,"file":"perf-cli.js","sourceRoot":"","sources":["../../../../src/_utils/perf-cli.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { streamToBufferPromise } from \"@utils/stream/BufferUtils\";\nimport { IStreamAndLength, IZip } from \"@utils/zip/zip\";\nimport { ZipExploded } from \"@utils/zip/zip-ex\";\nimport { Zip1 } from \"@utils/zip/zip1\";\nimport { Zip2 } from \"@utils/zip/zip2\";\nimport { Zip3 } from \"@utils/zip/zip3\";\n\nconsole.log(\"process.cwd():\");\nconsole.log(process.cwd());\n\nconsole.log(\"__dirname:\");\nconsole.log(__dirname);\n\nconst args = process.argv.slice(2);\nconsole.log(\"args:\");\nconsole.log(args);\n\nif (!args[0]) {\n    console.log(\"FILEPATH ARGUMENT IS MISSING.\");\n    process.exit(1);\n}\nconst argPath = args[0].trim();\nlet filePath = argPath;\nconsole.log(filePath);\nif (!fs.existsSync(filePath)) {\n    filePath = path.join(__dirname, argPath);\n    console.log(filePath);\n    if (!fs.existsSync(filePath)) {\n        filePath = path.join(process.cwd(), argPath);\n        console.log(filePath);\n        if (!fs.existsSync(filePath)) {\n            console.log(\"FILEPATH DOES NOT EXIST.\");\n            process.exit(1);\n        }\n    }\n}\n\nconst stats = fs.lstatSync(filePath);\nif (!stats.isFile() && !stats.isDirectory()) {\n    console.log(\"FILEPATH MUST BE FILE OR DIRECTORY.\");\n    process.exit(1);\n}\n\nconst fileName = path.basename(filePath);\nconst ext = path.extname(fileName);\n\nif (stats.isDirectory()) {\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        const zipExploded: IZip = await ZipExploded.loadPromise(filePath);\n        const entries = await zipExploded.getEntries();\n        for (const entryName of entries) {\n            console.log(\"############## \" + entryName);\n\n            let zipStream_: IStreamAndLength;\n            try {\n                zipStream_ = await zipExploded.entryStreamPromise(entryName);\n            } catch (err) {\n                console.log(err);\n                return;\n            }\n            const zipStream = zipStream_.stream;\n            let zipData: Buffer;\n            try {\n                zipData = await streamToBufferPromise(zipStream);\n            } catch (err) {\n                console.log(err);\n                return;\n            }\n\n            if (/\\.css$/i.test(entryName)) {\n                const str = zipData.toString(\"utf8\");\n                console.log(str);\n            }\n        }\n    })();\n} else if (/((\\.epub3?)|(\\.cbz)|(\\.zip))$/i.test(ext)) {\n    // tslint:disable-next-line:no-floating-promises\n    (async () => {\n        const time3 = process.hrtime();\n        const zip3: IZip = await Zip3.loadPromise(filePath);\n        const diff3 = process.hrtime(time3);\n        console.log(`Zip 3 (${zip3.entriesCount()}): ${diff3[0]} seconds + ${diff3[1]} nanoseconds`);\n\n        const time2 = process.hrtime();\n        const zip2: IZip = await Zip2.loadPromise(filePath);\n        const diff2 = process.hrtime(time2);\n        console.log(`Zip 2 (${zip2.entriesCount()}): ${diff2[0]} seconds + ${diff2[1]} nanoseconds`);\n\n        const time1 = process.hrtime();\n        const zip1: IZip = await Zip1.loadPromise(filePath);\n        const diff1 = process.hrtime(time1);\n        // const nanos = diff1[0] * 1e9 + diff1[1];\n        console.log(`Zip 1 (${zip1.entriesCount()}): ${diff1[0]} seconds + ${diff1[1]} nanoseconds`);\n\n        // const entries = await zip1.getEntries();\n        // for (const entryName of entries) {\n        //     console.log(entryName);\n        // }\n    })();\n}\n"]}