{"version":3,"file":"BufferReadableStream.js","sourceRoot":"","sources":["../../../../../src/_utils/stream/BufferReadableStream.ts"],"names":[],"mappings":";;;AAOA,mCAAkC;AAKlC,MAAa,oBAAqB,SAAQ,iBAAQ;IAI9C,YAAY,MAAc;QACtB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,IAAY;QAGrB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACzC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChB,OAAO;QACX,CAAC;QAED,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC;QAEhB,IAAI,IAAI,EAAE,CAAC;YACP,IAAI,CAAC,GAAG,IAAI,CAAC;YACb,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;gBACtB,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;YACrB,CAAC;YAED,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;CACJ;AAlCD,oDAkCC","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport { Readable } from \"stream\";\n\n// import * as debug_ from \"debug\";\n// const debug = debug_(\"r2:utils#stream/BufferReadableStream\");\n\nexport class BufferReadableStream extends Readable {\n    public readonly buffer: Buffer;\n    private alreadyRead: number;\n\n    constructor(buffer: Buffer) {\n        super();\n        this.buffer = buffer;\n        this.alreadyRead = 0;\n    }\n\n    public _read(size: number): void {\n        // debug(\"_read(size): \" + size);\n\n        if (this.alreadyRead >= this.buffer.length) {\n            this.push(null);\n            return;\n        }\n\n        let chunk = this.alreadyRead ?\n            this.buffer.slice(this.alreadyRead) :\n            this.buffer;\n\n        if (size) {\n            let l = size;\n            if (size > chunk.length) {\n                l = chunk.length;\n            }\n\n            chunk = chunk.slice(0, l);\n        }\n\n        this.alreadyRead += chunk.length;\n        this.push(chunk);\n    }\n}\n"]}