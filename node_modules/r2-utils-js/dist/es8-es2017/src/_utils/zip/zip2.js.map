{"version":3,"file":"zip2.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\n// import * as requestPromise from \"request-promise-native\";\nimport * as yauzl from \"yauzl\";\n\nimport { isHTTP } from \"../http/UrlUtils\";\nimport { streamToBufferPromise } from \"../stream/BufferUtils\";\nimport { IStreamAndLength, IZip, Zip } from \"./zip\";\nimport { HttpZipReader } from \"./zip2RandomAccessReader_Http\";\n\nconst debug = debug_(\"r2:utils#zip/zip2\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface IStringKeyedObject { [key: string]: any; }\n\nexport class Zip2 extends Zip {\n\n    public static async loadPromise(filePath: string): Promise<IZip> {\n        if (isHTTP(filePath)) {\n            return Zip2.loadPromiseHTTP(filePath);\n        }\n\n        return new Promise<IZip>((resolve, reject) => {\n\n            yauzl.open(filePath, { lazyEntries: true, autoClose: false }, (err, zip) => {\n                if (err || !zip) {\n                    debug(\"yauzl init ERROR\");\n                    debug(err);\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(err);\n                    return;\n                }\n                const zip2 = new Zip2(filePath, zip);\n\n                zip.on(\"error\", (erro) => {\n                    debug(\"yauzl ERROR\");\n                    debug(erro);\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(erro);\n                });\n\n                zip.readEntry(); // next (lazyEntries)\n                zip.on(\"entry\", (entry) => {\n                    // if (/\\/$/.test(entry.fileName)) {\n                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                        // skip directories / folders\n                    } else {\n                        // debug(entry.fileName);\n                        zip2.addEntry(entry);\n                    }\n                    zip.readEntry(); // next (lazyEntries)\n                });\n\n                zip.on(\"end\", () => {\n                    debug(\"yauzl END\");\n                    resolve(zip2);\n                });\n\n                zip.on(\"close\", () => {\n                    debug(\"yauzl CLOSE\");\n                });\n            });\n        });\n    }\n\n    private static async loadPromiseHTTP(filePath: string): Promise<IZip> {\n\n        // // No response streaming! :(\n        // // https://github.com/request/request-promise/issues/90\n        // const needsStreamingResponse = true;\n\n        return new Promise<IZip>(async (resolve, reject) => {\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const failure = (err: any) => {\n                debug(err);\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                reject(err);\n            };\n\n            const success = async (res: request.RequestResponse) => {\n                if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                    failure(\"HTTP CODE \" + res.statusCode);\n                    return;\n                }\n\n                debug(filePath);\n                debug(res.headers);\n\n                // if (!res.headers[\"content-type\"]\n                //     || res.headers[\"content-type\"] !== \"application/epub+zip\") {\n                //     // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                //     reject(\"content-type not supported!\");\n                //     return;\n                // }\n\n                // TODO: if the HTTP server does not provide Content-Length,\n                // then fallback on download, but interrupt (req.abort())\n                // if response payload reaches the max limit\n                if (!res.headers[\"content-length\"]) {\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(\"content-length not supported!\");\n                    return;\n                }\n                const httpZipByteLength = parseInt(res.headers[\"content-length\"] as string, 10);\n                debug(`Content-Length: ${httpZipByteLength}`);\n\n                if (!res.headers[\"accept-ranges\"]\n                    // Note: some servers have several headers with the same value!\n                    // (erm, https://raw.githubusercontent.com)\n                    // (comma-separated values, so we can't match \"bytes\" exactly)\n                    || res.headers[\"accept-ranges\"].indexOf(\"bytes\") < 0) {\n\n                    if (httpZipByteLength > (2 * 1024 * 1024)) {\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(\"accept-ranges not supported, file too big to download: \" + httpZipByteLength);\n                        return;\n                    }\n                    debug(\"Downloading: \" + filePath);\n\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    const failure_ = (err: any) => {\n\n                        debug(err);\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                        reject(err);\n                    };\n\n                    const success_ = async (ress: request.RequestResponse) => {\n                        if (ress.statusCode && (ress.statusCode < 200 || ress.statusCode >= 300)) {\n                            failure_(\"HTTP CODE \" + ress.statusCode);\n                            return;\n                        }\n\n                        // debug(filePath);\n                        // debug(res.headers);\n                        let buffer: Buffer;\n                        try {\n                            buffer = await streamToBufferPromise(ress);\n                        } catch (err) {\n                            debug(err);\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(err);\n                            return;\n                        }\n\n                        yauzl.fromBuffer(buffer,\n                            { lazyEntries: true },\n                            (err, zip) => {\n                                if (err || !zip) {\n                                    debug(\"yauzl init ERROR\");\n                                    debug(err);\n                                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                    reject(err);\n                                    return;\n                                }\n                                const zip2 = new Zip2(filePath, zip);\n\n                                zip.on(\"error\", (erro) => {\n                                    debug(\"yauzl ERROR\");\n                                    debug(erro);\n                                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                                    reject(erro);\n                                });\n\n                                zip.readEntry(); // next (lazyEntries)\n                                zip.on(\"entry\", (entry) => {\n                                    if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                        // skip directories / folders\n                                    } else {\n                                        // debug(entry.fileName);\n                                        zip2.addEntry(entry);\n                                    }\n                                    zip.readEntry(); // next (lazyEntries)\n                                });\n\n                                zip.on(\"end\", () => {\n                                    debug(\"yauzl END\");\n                                    resolve(zip2);\n                                });\n\n                                zip.on(\"close\", () => {\n                                    debug(\"yauzl CLOSE\");\n                                });\n                            });\n                    };\n\n                    // if (needsStreamingResponse) {\n                        request.get({\n                            headers: {},\n                            method: \"GET\",\n                            uri: filePath,\n                        })\n                            .on(\"response\", async (res) => {\n                                try {\n                                    await success_(res);\n                                }\n                                catch (successError) {\n                                    failure_(successError);\n                                    return;\n                                }\n                            })\n                            .on(\"error\", failure_);\n                    // } else {\n                    //     let ress: requestPromise.FullResponse;\n                    //     try {\n                    //         // tslint:disable-next-line:await-promise no-floating-promises\n                    //         ress = await requestPromise({\n                    //             headers: {},\n                    //             method: \"GET\",\n                    //             resolveWithFullResponse: true,\n                    //             uri: filePath,\n                    //         });\n                    //     } catch (err) {\n                    //         failure_(err);\n                    //         return;\n                    //     }\n\n                    //     await success_(ress);\n                    // }\n\n                    return;\n                }\n\n                const httpZipReader = new HttpZipReader(filePath, httpZipByteLength);\n                yauzl.fromRandomAccessReader(httpZipReader, httpZipByteLength,\n                    { lazyEntries: true, autoClose: false },\n                    (err, zip) => {\n                        if (err || !zip) {\n                            debug(\"yauzl init ERROR\");\n                            debug(err);\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(err);\n                            return;\n                        }\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        (zip as any).httpZipReader = httpZipReader;\n                        const zip2 = new Zip2(filePath, zip);\n\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        zip.on(\"error\", (erro: any) => {\n                            debug(\"yauzl ERROR\");\n                            debug(erro);\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                            reject(erro);\n                        });\n\n                        zip.readEntry(); // next (lazyEntries)\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        zip.on(\"entry\", (entry: any) => {\n                            if (entry.fileName[entry.fileName.length - 1] === \"/\") {\n                                // skip directories / folders\n                            } else {\n                                // debug(entry.fileName);\n                                zip2.addEntry(entry);\n                            }\n                            zip.readEntry(); // next (lazyEntries)\n                        });\n\n                        zip.on(\"end\", () => {\n                            debug(\"yauzl END\");\n                            resolve(zip2);\n                        });\n\n                        zip.on(\"close\", () => {\n                            debug(\"yauzl CLOSE\");\n                        });\n                    });\n            };\n\n            // if (needsStreamingResponse) {\n                request.get({\n                    headers: {},\n                    method: \"HEAD\",\n                    uri: filePath,\n                })\n                    .on(\"response\", async (res) => {\n                        try {\n                            await success(res);\n                        }\n                        catch (successError) {\n                            failure(successError);\n                            return;\n                        }\n                    })\n                    .on(\"error\", failure);\n            // } else {\n            //     // TODO: instead of a HEAD request, if not supported then\n            //     // GET with immediate req.abort() in the response callback\n            //     let res: requestPromise.FullResponse;\n            //     try {\n            //         // tslint:disable-next-line:await-promise no-floating-promises\n            //         res = await requestPromise({\n            //             headers: {},\n            //             method: \"HEAD\",\n            //             resolveWithFullResponse: true,\n            //             uri: filePath,\n            //         });\n            //     } catch (err) {\n            //         failure(err);\n            //         return;\n            //     }\n\n            //     await success(res);\n            // }\n        });\n    }\n\n    private entries: IStringKeyedObject;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private constructor(readonly filePath: string, readonly zip: any) {\n        super();\n\n        // see addEntry()\n        this.entries = {};\n    }\n\n    public freeDestroy(): void {\n        debug(\"freeDestroy: Zip2 -- \" + this.filePath);\n        if (this.zip) {\n            this.zip.close();\n        }\n    }\n\n    public entriesCount(): number {\n        return this.zip.entryCount;\n    }\n\n    public hasEntries(): boolean {\n        return this.entriesCount() > 0;\n    }\n\n    public hasEntry(entryPath: string): boolean {\n        return this.hasEntries() && this.entries[entryPath];\n    }\n\n    public async getEntries(): Promise<string[]> {\n\n        if (!this.hasEntries()) {\n            return Promise.resolve([]);\n        }\n        return Promise.resolve(Object.keys(this.entries));\n    }\n\n    public async entryStreamPromise(entryPath: string): Promise<IStreamAndLength> {\n\n        // debug(`entryStreamPromise: ${entryPath}`);\n\n        if (!this.hasEntries() || !this.hasEntry(entryPath)) {\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n            return Promise.reject(\"no such path in zip: \" + entryPath);\n        }\n\n        const entry = this.entries[entryPath];\n\n        return new Promise<IStreamAndLength>((resolve, reject) => {\n\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.zip.openReadStream(entry, (err: any, stream: NodeJS.ReadableStream) => {\n                if (err) {\n                    debug(\"yauzl openReadStream ERROR\");\n                    debug(err);\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                    reject(err);\n                    return;\n                }\n                const streamAndLength: IStreamAndLength = {\n                    length: entry.uncompressedSize as number,\n                    reset: async () => {\n                        return this.entryStreamPromise(entryPath);\n                    },\n                    stream,\n                };\n                resolve(streamAndLength);\n            });\n        });\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    private addEntry(entry: any) {\n        this.entries[entry.fileName] = entry;\n    }\n}\n"]}