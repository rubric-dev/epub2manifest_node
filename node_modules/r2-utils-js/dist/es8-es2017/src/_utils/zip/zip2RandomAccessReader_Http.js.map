{"version":3,"file":"zip2RandomAccessReader_Http.js","sourceRoot":"","sources":["../../../../../src/_utils/zip/zip2RandomAccessReader_Http.ts"],"names":[],"mappings":"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","sourcesContent":["// ==LICENSE-BEGIN==\n// Copyright 2017 European Digital Reading Lab. All rights reserved.\n// Licensed to the Readium Foundation under one or more contributor license agreements.\n// Use of this source code is governed by a BSD-style license\n// that can be found in the LICENSE file exposed on Github (readium) in the project repository.\n// ==LICENSE-END==\n\nimport * as debug_ from \"debug\";\nimport * as request from \"request\";\n// import * as requestPromise from \"request-promise-native\";\nimport { PassThrough } from \"stream\";\nimport * as yauzl from \"yauzl\";\n\nimport { bufferToStream, streamToBufferPromise } from \"../stream/BufferUtils\";\n\n// import { HttpReadableStream } from \"./HttpReadableStream\";\n\nconst debug = debug_(\"r2:utils#zip/zip2RandomAccessReader_Http\");\n\n// import * as util from \"util\";\n// export interface RandomAccessReader {\n//     _readStreamForRange(start: number, end: number): void;\n// }\n\n// YAUZL:\n// export abstract class RandomAccessReader extends EventEmitter {\n//     _readStreamForRange(start: number, end: number): void;\n//     createReadStream(options: { start: number; end: number }): void;\n//     read(buffer: Buffer, offset: number, length: number, position: number, callback: (err?: Error) => void): void;\n//     close(callback: (err?: Error) => void): void;\n// }\n\nexport class HttpZipReader extends yauzl.RandomAccessReader {\n\n    private firstBuffer: Buffer | undefined = undefined;\n    private firstBufferStart = 0;\n    private firstBufferEnd = 0;\n\n    constructor(readonly url: string, readonly byteLength: number) {\n        super();\n        // yauzl.RandomAccessReader.call(this);\n    }\n\n    public _readStreamForRange(start: number, end: number) {\n        // const length = end - start;\n        // debug(`_readStreamForRange (new HttpReadableStream) ${this.url}` +\n        //     ` content-length=${this.byteLength} start=${start} end+1=${end} (length=${length})`);\n\n        // return new HttpReadableStream(this.url, this.byteLength, start, end);\n        // =>\n\n        // const length = end - start;\n        // debug(`_read: ${size} (${this.url}` +\n        //     ` content-length=${this.byteLength} start=${this.start} end+1=${this.end} (length=${length}))`);\n        // debug(`alreadyRead: ${this.alreadyRead} (byteLength: ${length})`);\n\n        if (this.firstBuffer && start >= this.firstBufferStart && end <= this.firstBufferEnd) {\n\n            // debug(`HTTP CACHE ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n            const begin = start - this.firstBufferStart;\n            const stop = end - this.firstBufferStart;\n\n            return bufferToStream(this.firstBuffer.slice(begin, stop));\n        }\n\n        const stream = new PassThrough();\n\n        const lastByteIndex = end - 1;\n        const range = `${start}-${lastByteIndex}`;\n\n        // debug(`HTTP GET ${this.url}: ${start}-${end} (${length}) [${this.byteLength}]`);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const failure = (err: any) => {\n            debug(err);\n            // this.stream.end();\n        };\n\n        const success = async (res: request.RequestResponse) => {\n            if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 300)) {\n                failure(\"HTTP CODE \" + res.statusCode);\n                return;\n            }\n\n            // debug(res);\n\n            // debug(res.headers);\n            // debug(res.headers[\"content-type\"]);\n            // debug(`HTTP response content-range: ${res.headers[\"content-range\"]}`);\n            // debug(`HTTP response content-length: ${res.headers[\"content-length\"]}`);\n\n            if (this.firstBuffer) {\n                res.pipe(stream);\n                // // .on(\"end\", () => {\n                // //     debug(\"END\");\n                // // });\n            } else {\n                let buffer: Buffer;\n                try {\n                    buffer = await streamToBufferPromise(res);\n                } catch (err) {\n                    debug(err);\n                    stream.end();\n                    return;\n                }\n                debug(`streamToBufferPromise: ${buffer.length}`);\n\n                this.firstBuffer = buffer;\n                this.firstBufferStart = start;\n                this.firstBufferEnd = end;\n\n                stream.write(buffer);\n                stream.end();\n            }\n        };\n\n        // // No response streaming! :(\n        // // https://github.com/request/request-promise/issues/90\n        // const needsStreamingResponse = true;\n        // if (needsStreamingResponse) {\n            request.get({\n                headers: { Range: `bytes=${range}` },\n                method: \"GET\",\n                uri: this.url,\n            })\n                .on(\"response\", async (res) => {\n                    try {\n                        await success(res);\n                    }\n                    catch (successError) {\n                        failure(successError);\n                        return;\n                    }\n                })\n                .on(\"error\", failure);\n        // } else {\n        //     // tslint:disable-next-line:no-floating-promises\n        //     (async () => {\n        //         let res: requestPromise.FullResponse;\n        //         try {\n        //             // tslint:disable-next-line:await-promise no-floating-promises\n        //             res = await requestPromise({\n        //                 headers: { Range: `bytes=${range}` },\n        //                 method: \"GET\",\n        //                 resolveWithFullResponse: true,\n        //                 uri: this.url,\n        //             });\n        //         } catch (err) {\n        //             failure(err);\n        //             return;\n        //         }\n\n        //         await success(res);\n        //     })()\n        //         // .then(() => {\n        //         //     debug(\"done\");\n        //         // }).catch((err) => {\n        //         //     debug(err);\n        //         // })\n        //         ;\n        // }\n\n        return stream;\n    }\n}\n// util.inherits(HttpZipReader, yauzl.RandomAccessReader);\n\n// // tslint:disable-next-line:space-before-function-paren\n// HttpZipReader.prototype._readStreamForRange = function (start: number, end: number) {\n\n// };\n"]}